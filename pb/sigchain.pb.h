// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/sigchain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fsigchain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fsigchain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fsigchain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fsigchain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fsigchain_2eproto;
namespace pb {
class SigChain;
struct SigChainDefaultTypeInternal;
extern SigChainDefaultTypeInternal _SigChain_default_instance_;
class SigChainElem;
struct SigChainElemDefaultTypeInternal;
extern SigChainElemDefaultTypeInternal _SigChainElem_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::SigChain* Arena::CreateMaybeMessage<::pb::SigChain>(Arena*);
template<> ::pb::SigChainElem* Arena::CreateMaybeMessage<::pb::SigChainElem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum SigAlgo : int {
  SIGNATURE = 0,
  HASH = 1,
  SigAlgo_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SigAlgo_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SigAlgo_IsValid(int value);
constexpr SigAlgo SigAlgo_MIN = SIGNATURE;
constexpr SigAlgo SigAlgo_MAX = HASH;
constexpr int SigAlgo_ARRAYSIZE = SigAlgo_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SigAlgo_descriptor();
template<typename T>
inline const std::string& SigAlgo_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SigAlgo>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SigAlgo_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SigAlgo_descriptor(), enum_t_value);
}
inline bool SigAlgo_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SigAlgo* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SigAlgo>(
    SigAlgo_descriptor(), name, value);
}
// ===================================================================

class SigChainElem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SigChainElem) */ {
 public:
  inline SigChainElem() : SigChainElem(nullptr) {}
  ~SigChainElem() override;
  explicit constexpr SigChainElem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigChainElem(const SigChainElem& from);
  SigChainElem(SigChainElem&& from) noexcept
    : SigChainElem() {
    *this = ::std::move(from);
  }

  inline SigChainElem& operator=(const SigChainElem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigChainElem& operator=(SigChainElem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigChainElem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigChainElem* internal_default_instance() {
    return reinterpret_cast<const SigChainElem*>(
               &_SigChainElem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SigChainElem& a, SigChainElem& b) {
    a.Swap(&b);
  }
  inline void Swap(SigChainElem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigChainElem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigChainElem* New() const final {
    return new SigChainElem();
  }

  SigChainElem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigChainElem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigChainElem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigChainElem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigChainElem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SigChainElem";
  }
  protected:
  explicit SigChainElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNextPubkeyFieldNumber = 2,
    kSignatureFieldNumber = 4,
    kVrfFieldNumber = 6,
    kProofFieldNumber = 7,
    kMiningFieldNumber = 3,
    kSigAlgoFieldNumber = 5,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes next_pubkey = 2;
  void clear_next_pubkey();
  const std::string& next_pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_pubkey();
  PROTOBUF_MUST_USE_RESULT std::string* release_next_pubkey();
  void set_allocated_next_pubkey(std::string* next_pubkey);
  private:
  const std::string& _internal_next_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_pubkey(const std::string& value);
  std::string* _internal_mutable_next_pubkey();
  public:

  // bytes signature = 4;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes vrf = 6;
  void clear_vrf();
  const std::string& vrf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrf();
  PROTOBUF_MUST_USE_RESULT std::string* release_vrf();
  void set_allocated_vrf(std::string* vrf);
  private:
  const std::string& _internal_vrf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrf(const std::string& value);
  std::string* _internal_mutable_vrf();
  public:

  // bytes proof = 7;
  void clear_proof();
  const std::string& proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proof();
  PROTOBUF_MUST_USE_RESULT std::string* release_proof();
  void set_allocated_proof(std::string* proof);
  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(const std::string& value);
  std::string* _internal_mutable_proof();
  public:

  // bool mining = 3;
  void clear_mining();
  bool mining() const;
  void set_mining(bool value);
  private:
  bool _internal_mining() const;
  void _internal_set_mining(bool value);
  public:

  // .pb.SigAlgo sig_algo = 5;
  void clear_sig_algo();
  ::pb::SigAlgo sig_algo() const;
  void set_sig_algo(::pb::SigAlgo value);
  private:
  ::pb::SigAlgo _internal_sig_algo() const;
  void _internal_set_sig_algo(::pb::SigAlgo value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SigChainElem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
  bool mining_;
  int sig_algo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fsigchain_2eproto;
};
// -------------------------------------------------------------------

class SigChain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SigChain) */ {
 public:
  inline SigChain() : SigChain(nullptr) {}
  ~SigChain() override;
  explicit constexpr SigChain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigChain(const SigChain& from);
  SigChain(SigChain&& from) noexcept
    : SigChain() {
    *this = ::std::move(from);
  }

  inline SigChain& operator=(const SigChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigChain& operator=(SigChain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigChain& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigChain* internal_default_instance() {
    return reinterpret_cast<const SigChain*>(
               &_SigChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigChain& a, SigChain& b) {
    a.Swap(&b);
  }
  inline void Swap(SigChain* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigChain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigChain* New() const final {
    return new SigChain();
  }

  SigChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigChain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigChain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigChain& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigChain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SigChain";
  }
  protected:
  explicit SigChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 8,
    kBlockHashFieldNumber = 3,
    kSrcIdFieldNumber = 4,
    kSrcPubkeyFieldNumber = 5,
    kDestIdFieldNumber = 6,
    kDestPubkeyFieldNumber = 7,
    kNonceFieldNumber = 1,
    kDataSizeFieldNumber = 2,
  };
  // repeated .pb.SigChainElem elems = 8;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::pb::SigChainElem* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SigChainElem >*
      mutable_elems();
  private:
  const ::pb::SigChainElem& _internal_elems(int index) const;
  ::pb::SigChainElem* _internal_add_elems();
  public:
  const ::pb::SigChainElem& elems(int index) const;
  ::pb::SigChainElem* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SigChainElem >&
      elems() const;

  // bytes block_hash = 3;
  void clear_block_hash();
  const std::string& block_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // bytes src_id = 4;
  void clear_src_id();
  const std::string& src_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_src_id();
  void set_allocated_src_id(std::string* src_id);
  private:
  const std::string& _internal_src_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_id(const std::string& value);
  std::string* _internal_mutable_src_id();
  public:

  // bytes src_pubkey = 5;
  void clear_src_pubkey();
  const std::string& src_pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_pubkey();
  PROTOBUF_MUST_USE_RESULT std::string* release_src_pubkey();
  void set_allocated_src_pubkey(std::string* src_pubkey);
  private:
  const std::string& _internal_src_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_pubkey(const std::string& value);
  std::string* _internal_mutable_src_pubkey();
  public:

  // bytes dest_id = 6;
  void clear_dest_id();
  const std::string& dest_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dest_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dest_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_dest_id();
  void set_allocated_dest_id(std::string* dest_id);
  private:
  const std::string& _internal_dest_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest_id(const std::string& value);
  std::string* _internal_mutable_dest_id();
  public:

  // bytes dest_pubkey = 7;
  void clear_dest_pubkey();
  const std::string& dest_pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dest_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dest_pubkey();
  PROTOBUF_MUST_USE_RESULT std::string* release_dest_pubkey();
  void set_allocated_dest_pubkey(std::string* dest_pubkey);
  private:
  const std::string& _internal_dest_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest_pubkey(const std::string& value);
  std::string* _internal_mutable_dest_pubkey();
  public:

  // uint32 nonce = 1;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 data_size = 2;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_size() const;
  void _internal_set_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SigChain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SigChainElem > elems_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fsigchain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SigChainElem

// bytes id = 1;
inline void SigChainElem::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SigChainElem::id() const {
  // @@protoc_insertion_point(field_get:pb.SigChainElem.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChainElem::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChainElem.id)
}
inline std::string* SigChainElem::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pb.SigChainElem.id)
  return _s;
}
inline const std::string& SigChainElem::_internal_id() const {
  return id_.Get();
}
inline void SigChainElem::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChainElem::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChainElem::release_id() {
  // @@protoc_insertion_point(field_release:pb.SigChainElem.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChainElem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChainElem.id)
}

// bytes next_pubkey = 2;
inline void SigChainElem::clear_next_pubkey() {
  next_pubkey_.ClearToEmpty();
}
inline const std::string& SigChainElem::next_pubkey() const {
  // @@protoc_insertion_point(field_get:pb.SigChainElem.next_pubkey)
  return _internal_next_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChainElem::set_next_pubkey(ArgT0&& arg0, ArgT... args) {
 
 next_pubkey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChainElem.next_pubkey)
}
inline std::string* SigChainElem::mutable_next_pubkey() {
  std::string* _s = _internal_mutable_next_pubkey();
  // @@protoc_insertion_point(field_mutable:pb.SigChainElem.next_pubkey)
  return _s;
}
inline const std::string& SigChainElem::_internal_next_pubkey() const {
  return next_pubkey_.Get();
}
inline void SigChainElem::_internal_set_next_pubkey(const std::string& value) {
  
  next_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChainElem::_internal_mutable_next_pubkey() {
  
  return next_pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChainElem::release_next_pubkey() {
  // @@protoc_insertion_point(field_release:pb.SigChainElem.next_pubkey)
  return next_pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChainElem::set_allocated_next_pubkey(std::string* next_pubkey) {
  if (next_pubkey != nullptr) {
    
  } else {
    
  }
  next_pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_pubkey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChainElem.next_pubkey)
}

// bool mining = 3;
inline void SigChainElem::clear_mining() {
  mining_ = false;
}
inline bool SigChainElem::_internal_mining() const {
  return mining_;
}
inline bool SigChainElem::mining() const {
  // @@protoc_insertion_point(field_get:pb.SigChainElem.mining)
  return _internal_mining();
}
inline void SigChainElem::_internal_set_mining(bool value) {
  
  mining_ = value;
}
inline void SigChainElem::set_mining(bool value) {
  _internal_set_mining(value);
  // @@protoc_insertion_point(field_set:pb.SigChainElem.mining)
}

// bytes signature = 4;
inline void SigChainElem::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SigChainElem::signature() const {
  // @@protoc_insertion_point(field_get:pb.SigChainElem.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChainElem::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChainElem.signature)
}
inline std::string* SigChainElem::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:pb.SigChainElem.signature)
  return _s;
}
inline const std::string& SigChainElem::_internal_signature() const {
  return signature_.Get();
}
inline void SigChainElem::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChainElem::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChainElem::release_signature() {
  // @@protoc_insertion_point(field_release:pb.SigChainElem.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChainElem::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChainElem.signature)
}

// .pb.SigAlgo sig_algo = 5;
inline void SigChainElem::clear_sig_algo() {
  sig_algo_ = 0;
}
inline ::pb::SigAlgo SigChainElem::_internal_sig_algo() const {
  return static_cast< ::pb::SigAlgo >(sig_algo_);
}
inline ::pb::SigAlgo SigChainElem::sig_algo() const {
  // @@protoc_insertion_point(field_get:pb.SigChainElem.sig_algo)
  return _internal_sig_algo();
}
inline void SigChainElem::_internal_set_sig_algo(::pb::SigAlgo value) {
  
  sig_algo_ = value;
}
inline void SigChainElem::set_sig_algo(::pb::SigAlgo value) {
  _internal_set_sig_algo(value);
  // @@protoc_insertion_point(field_set:pb.SigChainElem.sig_algo)
}

// bytes vrf = 6;
inline void SigChainElem::clear_vrf() {
  vrf_.ClearToEmpty();
}
inline const std::string& SigChainElem::vrf() const {
  // @@protoc_insertion_point(field_get:pb.SigChainElem.vrf)
  return _internal_vrf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChainElem::set_vrf(ArgT0&& arg0, ArgT... args) {
 
 vrf_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChainElem.vrf)
}
inline std::string* SigChainElem::mutable_vrf() {
  std::string* _s = _internal_mutable_vrf();
  // @@protoc_insertion_point(field_mutable:pb.SigChainElem.vrf)
  return _s;
}
inline const std::string& SigChainElem::_internal_vrf() const {
  return vrf_.Get();
}
inline void SigChainElem::_internal_set_vrf(const std::string& value) {
  
  vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChainElem::_internal_mutable_vrf() {
  
  return vrf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChainElem::release_vrf() {
  // @@protoc_insertion_point(field_release:pb.SigChainElem.vrf)
  return vrf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChainElem::set_allocated_vrf(std::string* vrf) {
  if (vrf != nullptr) {
    
  } else {
    
  }
  vrf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChainElem.vrf)
}

// bytes proof = 7;
inline void SigChainElem::clear_proof() {
  proof_.ClearToEmpty();
}
inline const std::string& SigChainElem::proof() const {
  // @@protoc_insertion_point(field_get:pb.SigChainElem.proof)
  return _internal_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChainElem::set_proof(ArgT0&& arg0, ArgT... args) {
 
 proof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChainElem.proof)
}
inline std::string* SigChainElem::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:pb.SigChainElem.proof)
  return _s;
}
inline const std::string& SigChainElem::_internal_proof() const {
  return proof_.Get();
}
inline void SigChainElem::_internal_set_proof(const std::string& value) {
  
  proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChainElem::_internal_mutable_proof() {
  
  return proof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChainElem::release_proof() {
  // @@protoc_insertion_point(field_release:pb.SigChainElem.proof)
  return proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChainElem::set_allocated_proof(std::string* proof) {
  if (proof != nullptr) {
    
  } else {
    
  }
  proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proof,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChainElem.proof)
}

// -------------------------------------------------------------------

// SigChain

// uint32 nonce = 1;
inline void SigChain::clear_nonce() {
  nonce_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigChain::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigChain::nonce() const {
  // @@protoc_insertion_point(field_get:pb.SigChain.nonce)
  return _internal_nonce();
}
inline void SigChain::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nonce_ = value;
}
inline void SigChain::set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:pb.SigChain.nonce)
}

// uint32 data_size = 2;
inline void SigChain::clear_data_size() {
  data_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigChain::_internal_data_size() const {
  return data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SigChain::data_size() const {
  // @@protoc_insertion_point(field_get:pb.SigChain.data_size)
  return _internal_data_size();
}
inline void SigChain::_internal_set_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_size_ = value;
}
inline void SigChain::set_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:pb.SigChain.data_size)
}

// bytes block_hash = 3;
inline void SigChain::clear_block_hash() {
  block_hash_.ClearToEmpty();
}
inline const std::string& SigChain::block_hash() const {
  // @@protoc_insertion_point(field_get:pb.SigChain.block_hash)
  return _internal_block_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChain::set_block_hash(ArgT0&& arg0, ArgT... args) {
 
 block_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChain.block_hash)
}
inline std::string* SigChain::mutable_block_hash() {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:pb.SigChain.block_hash)
  return _s;
}
inline const std::string& SigChain::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void SigChain::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChain::_internal_mutable_block_hash() {
  
  return block_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChain::release_block_hash() {
  // @@protoc_insertion_point(field_release:pb.SigChain.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChain::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChain.block_hash)
}

// bytes src_id = 4;
inline void SigChain::clear_src_id() {
  src_id_.ClearToEmpty();
}
inline const std::string& SigChain::src_id() const {
  // @@protoc_insertion_point(field_get:pb.SigChain.src_id)
  return _internal_src_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChain::set_src_id(ArgT0&& arg0, ArgT... args) {
 
 src_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChain.src_id)
}
inline std::string* SigChain::mutable_src_id() {
  std::string* _s = _internal_mutable_src_id();
  // @@protoc_insertion_point(field_mutable:pb.SigChain.src_id)
  return _s;
}
inline const std::string& SigChain::_internal_src_id() const {
  return src_id_.Get();
}
inline void SigChain::_internal_set_src_id(const std::string& value) {
  
  src_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChain::_internal_mutable_src_id() {
  
  return src_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChain::release_src_id() {
  // @@protoc_insertion_point(field_release:pb.SigChain.src_id)
  return src_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChain::set_allocated_src_id(std::string* src_id) {
  if (src_id != nullptr) {
    
  } else {
    
  }
  src_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChain.src_id)
}

// bytes src_pubkey = 5;
inline void SigChain::clear_src_pubkey() {
  src_pubkey_.ClearToEmpty();
}
inline const std::string& SigChain::src_pubkey() const {
  // @@protoc_insertion_point(field_get:pb.SigChain.src_pubkey)
  return _internal_src_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChain::set_src_pubkey(ArgT0&& arg0, ArgT... args) {
 
 src_pubkey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChain.src_pubkey)
}
inline std::string* SigChain::mutable_src_pubkey() {
  std::string* _s = _internal_mutable_src_pubkey();
  // @@protoc_insertion_point(field_mutable:pb.SigChain.src_pubkey)
  return _s;
}
inline const std::string& SigChain::_internal_src_pubkey() const {
  return src_pubkey_.Get();
}
inline void SigChain::_internal_set_src_pubkey(const std::string& value) {
  
  src_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChain::_internal_mutable_src_pubkey() {
  
  return src_pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChain::release_src_pubkey() {
  // @@protoc_insertion_point(field_release:pb.SigChain.src_pubkey)
  return src_pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChain::set_allocated_src_pubkey(std::string* src_pubkey) {
  if (src_pubkey != nullptr) {
    
  } else {
    
  }
  src_pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_pubkey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChain.src_pubkey)
}

// bytes dest_id = 6;
inline void SigChain::clear_dest_id() {
  dest_id_.ClearToEmpty();
}
inline const std::string& SigChain::dest_id() const {
  // @@protoc_insertion_point(field_get:pb.SigChain.dest_id)
  return _internal_dest_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChain::set_dest_id(ArgT0&& arg0, ArgT... args) {
 
 dest_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChain.dest_id)
}
inline std::string* SigChain::mutable_dest_id() {
  std::string* _s = _internal_mutable_dest_id();
  // @@protoc_insertion_point(field_mutable:pb.SigChain.dest_id)
  return _s;
}
inline const std::string& SigChain::_internal_dest_id() const {
  return dest_id_.Get();
}
inline void SigChain::_internal_set_dest_id(const std::string& value) {
  
  dest_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChain::_internal_mutable_dest_id() {
  
  return dest_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChain::release_dest_id() {
  // @@protoc_insertion_point(field_release:pb.SigChain.dest_id)
  return dest_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChain::set_allocated_dest_id(std::string* dest_id) {
  if (dest_id != nullptr) {
    
  } else {
    
  }
  dest_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChain.dest_id)
}

// bytes dest_pubkey = 7;
inline void SigChain::clear_dest_pubkey() {
  dest_pubkey_.ClearToEmpty();
}
inline const std::string& SigChain::dest_pubkey() const {
  // @@protoc_insertion_point(field_get:pb.SigChain.dest_pubkey)
  return _internal_dest_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigChain::set_dest_pubkey(ArgT0&& arg0, ArgT... args) {
 
 dest_pubkey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SigChain.dest_pubkey)
}
inline std::string* SigChain::mutable_dest_pubkey() {
  std::string* _s = _internal_mutable_dest_pubkey();
  // @@protoc_insertion_point(field_mutable:pb.SigChain.dest_pubkey)
  return _s;
}
inline const std::string& SigChain::_internal_dest_pubkey() const {
  return dest_pubkey_.Get();
}
inline void SigChain::_internal_set_dest_pubkey(const std::string& value) {
  
  dest_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigChain::_internal_mutable_dest_pubkey() {
  
  return dest_pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigChain::release_dest_pubkey() {
  // @@protoc_insertion_point(field_release:pb.SigChain.dest_pubkey)
  return dest_pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigChain::set_allocated_dest_pubkey(std::string* dest_pubkey) {
  if (dest_pubkey != nullptr) {
    
  } else {
    
  }
  dest_pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest_pubkey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.SigChain.dest_pubkey)
}

// repeated .pb.SigChainElem elems = 8;
inline int SigChain::_internal_elems_size() const {
  return elems_.size();
}
inline int SigChain::elems_size() const {
  return _internal_elems_size();
}
inline void SigChain::clear_elems() {
  elems_.Clear();
}
inline ::pb::SigChainElem* SigChain::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SigChain.elems)
  return elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SigChainElem >*
SigChain::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:pb.SigChain.elems)
  return &elems_;
}
inline const ::pb::SigChainElem& SigChain::_internal_elems(int index) const {
  return elems_.Get(index);
}
inline const ::pb::SigChainElem& SigChain::elems(int index) const {
  // @@protoc_insertion_point(field_get:pb.SigChain.elems)
  return _internal_elems(index);
}
inline ::pb::SigChainElem* SigChain::_internal_add_elems() {
  return elems_.Add();
}
inline ::pb::SigChainElem* SigChain::add_elems() {
  ::pb::SigChainElem* _add = _internal_add_elems();
  // @@protoc_insertion_point(field_add:pb.SigChain.elems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::SigChainElem >&
SigChain::elems() const {
  // @@protoc_insertion_point(field_list:pb.SigChain.elems)
  return elems_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::SigAlgo> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::SigAlgo>() {
  return ::pb::SigAlgo_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fsigchain_2eproto
