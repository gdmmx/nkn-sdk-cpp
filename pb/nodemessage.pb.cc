// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/nodemessage.proto

#include "pb/nodemessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pb_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_pb_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fblock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_pb_2fblock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fsigchain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigChainElem_pb_2fsigchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fnodemessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateNode_pb_2fnodemessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fnodemessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateRequest_pb_2fnodemessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_pb_2ftransaction_2eproto;
namespace pb {
class UnsignedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsignedMessage> _instance;
} _UnsignedMessage_default_instance_;
class SignedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignedMessage> _instance;
} _SignedMessage_default_instance_;
class VoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vote> _instance;
} _Vote_default_instance_;
class IHaveBlockProposalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IHaveBlockProposal> _instance;
} _IHaveBlockProposal_default_instance_;
class RequestBlockProposalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestBlockProposal> _instance;
} _RequestBlockProposal_default_instance_;
class RequestBlockProposalReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestBlockProposalReply> _instance;
} _RequestBlockProposalReply_default_instance_;
class RequestProposalTransactionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestProposalTransactions> _instance;
} _RequestProposalTransactions_default_instance_;
class RequestProposalTransactionsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestProposalTransactionsReply> _instance;
} _RequestProposalTransactionsReply_default_instance_;
class GetConsensusStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConsensusState> _instance;
} _GetConsensusState_default_instance_;
class GetConsensusStateReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConsensusStateReply> _instance;
} _GetConsensusStateReply_default_instance_;
class GetBlockHeadersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockHeaders> _instance;
} _GetBlockHeaders_default_instance_;
class GetBlockHeadersReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockHeadersReply> _instance;
} _GetBlockHeadersReply_default_instance_;
class GetBlocksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlocks> _instance;
} _GetBlocks_default_instance_;
class GetBlocksReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlocksReply> _instance;
} _GetBlocksReply_default_instance_;
class StateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateRequest> _instance;
} _StateRequest_default_instance_;
class StateNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateNode> _instance;
} _StateNode_default_instance_;
class GetStatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStates> _instance;
} _GetStates_default_instance_;
class GetStatesReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatesReply> _instance;
} _GetStatesReply_default_instance_;
class RelayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Relay> _instance;
} _Relay_default_instance_;
class TransactionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transactions> _instance;
} _Transactions_default_instance_;
class BacktrackSignatureChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BacktrackSignatureChain> _instance;
} _BacktrackSignatureChain_default_instance_;
class IHaveSignatureChainTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IHaveSignatureChainTransaction> _instance;
} _IHaveSignatureChainTransaction_default_instance_;
class RequestSignatureChainTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestSignatureChainTransaction> _instance;
} _RequestSignatureChainTransaction_default_instance_;
class RequestSignatureChainTransactionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestSignatureChainTransactionReply> _instance;
} _RequestSignatureChainTransactionReply_default_instance_;
class PinSignatureChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PinSignatureChain> _instance;
} _PinSignatureChain_default_instance_;
class SignatureChainObjectionUnsignedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureChainObjectionUnsigned> _instance;
} _SignatureChainObjectionUnsigned_default_instance_;
class SignatureChainObjectionSignedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureChainObjectionSigned> _instance;
} _SignatureChainObjectionSigned_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_BacktrackSignatureChain_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BacktrackSignatureChain_default_instance_;
    new (ptr) ::pb::BacktrackSignatureChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BacktrackSignatureChain_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BacktrackSignatureChain_pb_2fnodemessage_2eproto}, {
      &scc_info_SigChainElem_pb_2fsigchain_2eproto.base,}};

static void InitDefaultsscc_info_GetBlockHeaders_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockHeaders_default_instance_;
    new (ptr) ::pb::GetBlockHeaders();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockHeaders_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockHeaders_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockHeadersReply_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockHeadersReply_default_instance_;
    new (ptr) ::pb::GetBlockHeadersReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBlockHeadersReply_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBlockHeadersReply_pb_2fnodemessage_2eproto}, {
      &scc_info_Header_pb_2fblock_2eproto.base,}};

static void InitDefaultsscc_info_GetBlocks_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlocks_default_instance_;
    new (ptr) ::pb::GetBlocks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlocks_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlocks_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_GetBlocksReply_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlocksReply_default_instance_;
    new (ptr) ::pb::GetBlocksReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBlocksReply_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBlocksReply_pb_2fnodemessage_2eproto}, {
      &scc_info_Block_pb_2fblock_2eproto.base,}};

static void InitDefaultsscc_info_GetConsensusState_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetConsensusState_default_instance_;
    new (ptr) ::pb::GetConsensusState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConsensusState_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConsensusState_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_GetConsensusStateReply_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetConsensusStateReply_default_instance_;
    new (ptr) ::pb::GetConsensusStateReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConsensusStateReply_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConsensusStateReply_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_GetStates_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetStates_default_instance_;
    new (ptr) ::pb::GetStates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStates_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStates_pb_2fnodemessage_2eproto}, {
      &scc_info_StateRequest_pb_2fnodemessage_2eproto.base,}};

static void InitDefaultsscc_info_GetStatesReply_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetStatesReply_default_instance_;
    new (ptr) ::pb::GetStatesReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStatesReply_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStatesReply_pb_2fnodemessage_2eproto}, {
      &scc_info_StateNode_pb_2fnodemessage_2eproto.base,}};

static void InitDefaultsscc_info_IHaveBlockProposal_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_IHaveBlockProposal_default_instance_;
    new (ptr) ::pb::IHaveBlockProposal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IHaveBlockProposal_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IHaveBlockProposal_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_IHaveSignatureChainTransaction_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_IHaveSignatureChainTransaction_default_instance_;
    new (ptr) ::pb::IHaveSignatureChainTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IHaveSignatureChainTransaction_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IHaveSignatureChainTransaction_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_PinSignatureChain_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PinSignatureChain_default_instance_;
    new (ptr) ::pb::PinSignatureChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PinSignatureChain_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PinSignatureChain_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_Relay_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Relay_default_instance_;
    new (ptr) ::pb::Relay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Relay_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Relay_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_RequestBlockProposal_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RequestBlockProposal_default_instance_;
    new (ptr) ::pb::RequestBlockProposal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestBlockProposal_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestBlockProposal_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_RequestBlockProposalReply_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RequestBlockProposalReply_default_instance_;
    new (ptr) ::pb::RequestBlockProposalReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestBlockProposalReply_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestBlockProposalReply_pb_2fnodemessage_2eproto}, {
      &scc_info_Block_pb_2fblock_2eproto.base,}};

static void InitDefaultsscc_info_RequestProposalTransactions_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RequestProposalTransactions_default_instance_;
    new (ptr) ::pb::RequestProposalTransactions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestProposalTransactions_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestProposalTransactions_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_RequestProposalTransactionsReply_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RequestProposalTransactionsReply_default_instance_;
    new (ptr) ::pb::RequestProposalTransactionsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestProposalTransactionsReply_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestProposalTransactionsReply_pb_2fnodemessage_2eproto}, {
      &scc_info_Transaction_pb_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_RequestSignatureChainTransaction_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RequestSignatureChainTransaction_default_instance_;
    new (ptr) ::pb::RequestSignatureChainTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestSignatureChainTransaction_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestSignatureChainTransaction_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_RequestSignatureChainTransactionReply_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RequestSignatureChainTransactionReply_default_instance_;
    new (ptr) ::pb::RequestSignatureChainTransactionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestSignatureChainTransactionReply_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestSignatureChainTransactionReply_pb_2fnodemessage_2eproto}, {
      &scc_info_Transaction_pb_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_SignatureChainObjectionSigned_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SignatureChainObjectionSigned_default_instance_;
    new (ptr) ::pb::SignatureChainObjectionSigned();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignatureChainObjectionSigned_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignatureChainObjectionSigned_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_SignatureChainObjectionUnsigned_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SignatureChainObjectionUnsigned_default_instance_;
    new (ptr) ::pb::SignatureChainObjectionUnsigned();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignatureChainObjectionUnsigned_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignatureChainObjectionUnsigned_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_SignedMessage_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SignedMessage_default_instance_;
    new (ptr) ::pb::SignedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignedMessage_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignedMessage_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_StateNode_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_StateNode_default_instance_;
    new (ptr) ::pb::StateNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateNode_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StateNode_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_StateRequest_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_StateRequest_default_instance_;
    new (ptr) ::pb::StateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateRequest_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StateRequest_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_Transactions_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Transactions_default_instance_;
    new (ptr) ::pb::Transactions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transactions_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transactions_pb_2fnodemessage_2eproto}, {
      &scc_info_Transaction_pb_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_UnsignedMessage_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_UnsignedMessage_default_instance_;
    new (ptr) ::pb::UnsignedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsignedMessage_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsignedMessage_pb_2fnodemessage_2eproto}, {}};

static void InitDefaultsscc_info_Vote_pb_2fnodemessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Vote_default_instance_;
    new (ptr) ::pb::Vote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_pb_2fnodemessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vote_pb_2fnodemessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pb_2fnodemessage_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pb_2fnodemessage_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pb_2fnodemessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pb_2fnodemessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedMessage, message_type_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SignedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SignedMessage, message_),
  PROTOBUF_FIELD_OFFSET(::pb::SignedMessage, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Vote, height_),
  PROTOBUF_FIELD_OFFSET(::pb::Vote, block_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::IHaveBlockProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::IHaveBlockProposal, height_),
  PROTOBUF_FIELD_OFFSET(::pb::IHaveBlockProposal, block_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RequestBlockProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RequestBlockProposal, block_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::RequestBlockProposal, type_),
  PROTOBUF_FIELD_OFFSET(::pb::RequestBlockProposal, short_hash_salt_),
  PROTOBUF_FIELD_OFFSET(::pb::RequestBlockProposal, short_hash_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RequestBlockProposalReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RequestBlockProposalReply, block_),
  PROTOBUF_FIELD_OFFSET(::pb::RequestBlockProposalReply, transactions_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RequestProposalTransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RequestProposalTransactions, block_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::RequestProposalTransactions, type_),
  PROTOBUF_FIELD_OFFSET(::pb::RequestProposalTransactions, short_hash_salt_),
  PROTOBUF_FIELD_OFFSET(::pb::RequestProposalTransactions, short_hash_size_),
  PROTOBUF_FIELD_OFFSET(::pb::RequestProposalTransactions, transactions_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RequestProposalTransactionsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RequestProposalTransactionsReply, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetConsensusState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetConsensusStateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetConsensusStateReply, ledger_block_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::GetConsensusStateReply, ledger_height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetConsensusStateReply, consensus_height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetConsensusStateReply, min_verifiable_height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetConsensusStateReply, sync_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockHeaders, start_height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockHeaders, end_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockHeadersReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockHeadersReply, block_headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlocks, start_height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlocks, end_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlocksReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlocksReply, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::StateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::StateRequest, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::StateNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::StateNode, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetStates, reqs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetStatesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetStatesReply, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Relay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Relay, src_identifier_),
  PROTOBUF_FIELD_OFFSET(::pb::Relay, src_pubkey_),
  PROTOBUF_FIELD_OFFSET(::pb::Relay, dest_id_),
  PROTOBUF_FIELD_OFFSET(::pb::Relay, payload_),
  PROTOBUF_FIELD_OFFSET(::pb::Relay, max_holding_seconds_),
  PROTOBUF_FIELD_OFFSET(::pb::Relay, block_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::Relay, last_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::Relay, sig_chain_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Transactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Transactions, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BacktrackSignatureChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BacktrackSignatureChain, sig_chain_elems_),
  PROTOBUF_FIELD_OFFSET(::pb::BacktrackSignatureChain, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::IHaveSignatureChainTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::IHaveSignatureChainTransaction, height_),
  PROTOBUF_FIELD_OFFSET(::pb::IHaveSignatureChainTransaction, signature_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RequestSignatureChainTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RequestSignatureChainTransaction, signature_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RequestSignatureChainTransactionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RequestSignatureChainTransactionReply, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PinSignatureChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PinSignatureChain, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SignatureChainObjectionUnsigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SignatureChainObjectionUnsigned, height_),
  PROTOBUF_FIELD_OFFSET(::pb::SignatureChainObjectionUnsigned, signature_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::SignatureChainObjectionUnsigned, reporter_pubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SignatureChainObjectionSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SignatureChainObjectionSigned, message_),
  PROTOBUF_FIELD_OFFSET(::pb::SignatureChainObjectionSigned, signature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::UnsignedMessage)},
  { 7, -1, sizeof(::pb::SignedMessage)},
  { 14, -1, sizeof(::pb::Vote)},
  { 21, -1, sizeof(::pb::IHaveBlockProposal)},
  { 28, -1, sizeof(::pb::RequestBlockProposal)},
  { 37, -1, sizeof(::pb::RequestBlockProposalReply)},
  { 44, -1, sizeof(::pb::RequestProposalTransactions)},
  { 54, -1, sizeof(::pb::RequestProposalTransactionsReply)},
  { 60, -1, sizeof(::pb::GetConsensusState)},
  { 65, -1, sizeof(::pb::GetConsensusStateReply)},
  { 75, -1, sizeof(::pb::GetBlockHeaders)},
  { 82, -1, sizeof(::pb::GetBlockHeadersReply)},
  { 88, -1, sizeof(::pb::GetBlocks)},
  { 95, -1, sizeof(::pb::GetBlocksReply)},
  { 101, -1, sizeof(::pb::StateRequest)},
  { 107, -1, sizeof(::pb::StateNode)},
  { 113, -1, sizeof(::pb::GetStates)},
  { 119, -1, sizeof(::pb::GetStatesReply)},
  { 125, -1, sizeof(::pb::Relay)},
  { 138, -1, sizeof(::pb::Transactions)},
  { 144, -1, sizeof(::pb::BacktrackSignatureChain)},
  { 151, -1, sizeof(::pb::IHaveSignatureChainTransaction)},
  { 158, -1, sizeof(::pb::RequestSignatureChainTransaction)},
  { 164, -1, sizeof(::pb::RequestSignatureChainTransactionReply)},
  { 170, -1, sizeof(::pb::PinSignatureChain)},
  { 176, -1, sizeof(::pb::SignatureChainObjectionUnsigned)},
  { 184, -1, sizeof(::pb::SignatureChainObjectionSigned)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_UnsignedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SignedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_IHaveBlockProposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RequestBlockProposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RequestBlockProposalReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RequestProposalTransactions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RequestProposalTransactionsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetConsensusState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetConsensusStateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockHeadersReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlocks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlocksReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_StateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_StateNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetStates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetStatesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Relay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Transactions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BacktrackSignatureChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_IHaveSignatureChainTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RequestSignatureChainTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RequestSignatureChainTransactionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PinSignatureChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SignatureChainObjectionUnsigned_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SignatureChainObjectionSigned_default_instance_),
};

const char descriptor_table_protodef_pb_2fnodemessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024pb/nodemessage.proto\022\002pb\032\rpb/node.prot"
  "o\032\021pb/sigchain.proto\032\016pb/block.proto\032\024pb"
  "/transaction.proto\"I\n\017UnsignedMessage\022%\n"
  "\014message_type\030\001 \001(\0162\017.pb.MessageType\022\017\n\007"
  "message\030\002 \001(\014\"3\n\rSignedMessage\022\017\n\007messag"
  "e\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\"*\n\004Vote\022\016\n\006he"
  "ight\030\001 \001(\r\022\022\n\nblock_hash\030\002 \001(\014\"8\n\022IHaveB"
  "lockProposal\022\016\n\006height\030\001 \001(\r\022\022\n\nblock_ha"
  "sh\030\002 \001(\014\"\206\001\n\024RequestBlockProposal\022\022\n\nblo"
  "ck_hash\030\001 \001(\014\022(\n\004type\030\002 \001(\0162\032.pb.Request"
  "TransactionType\022\027\n\017short_hash_salt\030\003 \001(\014"
  "\022\027\n\017short_hash_size\030\004 \001(\r\"P\n\031RequestBloc"
  "kProposalReply\022\030\n\005block\030\001 \001(\0132\t.pb.Block"
  "\022\031\n\021transactions_hash\030\002 \003(\014\"\250\001\n\033RequestP"
  "roposalTransactions\022\022\n\nblock_hash\030\001 \001(\014\022"
  "(\n\004type\030\002 \001(\0162\032.pb.RequestTransactionTyp"
  "e\022\027\n\017short_hash_salt\030\003 \001(\014\022\027\n\017short_hash"
  "_size\030\004 \001(\r\022\031\n\021transactions_hash\030\005 \003(\014\"I"
  "\n RequestProposalTransactionsReply\022%\n\014tr"
  "ansactions\030\001 \003(\0132\017.pb.Transaction\"\023\n\021Get"
  "ConsensusState\"\246\001\n\026GetConsensusStateRepl"
  "y\022\031\n\021ledger_block_hash\030\002 \001(\014\022\025\n\rledger_h"
  "eight\030\001 \001(\r\022\030\n\020consensus_height\030\003 \001(\r\022\035\n"
  "\025min_verifiable_height\030\005 \001(\r\022!\n\nsync_sta"
  "te\030\004 \001(\0162\r.pb.SyncState\";\n\017GetBlockHeade"
  "rs\022\024\n\014start_height\030\001 \001(\r\022\022\n\nend_height\030\002"
  " \001(\r\"9\n\024GetBlockHeadersReply\022!\n\rblock_he"
  "aders\030\001 \003(\0132\n.pb.Header\"5\n\tGetBlocks\022\024\n\014"
  "start_height\030\001 \001(\r\022\022\n\nend_height\030\002 \001(\r\"+"
  "\n\016GetBlocksReply\022\031\n\006blocks\030\001 \003(\0132\t.pb.Bl"
  "ock\"\034\n\014StateRequest\022\014\n\004hash\030\001 \001(\014\"\031\n\tSta"
  "teNode\022\014\n\004node\030\001 \001(\014\"+\n\tGetStates\022\036\n\004req"
  "s\030\001 \003(\0132\020.pb.StateRequest\".\n\016GetStatesRe"
  "ply\022\034\n\005nodes\030\001 \003(\0132\r.pb.StateNode\"\260\001\n\005Re"
  "lay\022\026\n\016src_identifier\030\001 \001(\t\022\022\n\nsrc_pubke"
  "y\030\006 \001(\014\022\017\n\007dest_id\030\002 \001(\014\022\017\n\007payload\030\003 \001("
  "\014\022\033\n\023max_holding_seconds\030\005 \001(\r\022\022\n\nblock_"
  "hash\030\007 \001(\014\022\021\n\tlast_hash\030\010 \001(\014\022\025\n\rsig_cha"
  "in_len\030\t \001(\r\"5\n\014Transactions\022%\n\014transact"
  "ions\030\001 \003(\0132\017.pb.Transaction\"R\n\027Backtrack"
  "SignatureChain\022)\n\017sig_chain_elems\030\001 \003(\0132"
  "\020.pb.SigChainElem\022\014\n\004hash\030\002 \001(\014\"H\n\036IHave"
  "SignatureChainTransaction\022\016\n\006height\030\001 \001("
  "\r\022\026\n\016signature_hash\030\002 \001(\014\":\n RequestSign"
  "atureChainTransaction\022\026\n\016signature_hash\030"
  "\001 \001(\014\"M\n%RequestSignatureChainTransactio"
  "nReply\022$\n\013transaction\030\001 \001(\0132\017.pb.Transac"
  "tion\"!\n\021PinSignatureChain\022\014\n\004hash\030\001 \001(\014\""
  "b\n\037SignatureChainObjectionUnsigned\022\016\n\006he"
  "ight\030\001 \001(\r\022\026\n\016signature_hash\030\002 \001(\014\022\027\n\017re"
  "porter_pubkey\030\003 \001(\014\"C\n\035SignatureChainObj"
  "ectionSigned\022\017\n\007message\030\001 \001(\014\022\021\n\tsignatu"
  "re\030\002 \001(\014*\221\005\n\013MessageType\022\'\n#MESSAGE_TYPE"
  "_PLACEHOLDER_DO_NOT_USE\020\000\022\010\n\004VOTE\020\001\022\031\n\025I"
  "_HAVE_BLOCK_PROPOSAL\020\002\022\032\n\026REQUEST_BLOCK_"
  "PROPOSAL\020\003\022 \n\034REQUEST_BLOCK_PROPOSAL_REP"
  "LY\020\004\022\027\n\023GET_CONSENSUS_STATE\020\005\022\035\n\031GET_CON"
  "SENSUS_STATE_REPLY\020\006\022\025\n\021GET_BLOCK_HEADER"
  "S\020\007\022\033\n\027GET_BLOCK_HEADERS_REPLY\020\010\022\016\n\nGET_"
  "BLOCKS\020\t\022\024\n\020GET_BLOCKS_REPLY\020\n\022\t\n\005RELAY\020"
  "\013\022\020\n\014TRANSACTIONS\020\014\022\035\n\031BACKTRACK_SIGNATU"
  "RE_CHAIN\020\r\022!\n\035REQUEST_PROPOSAL_TRANSACTI"
  "ONS\020\016\022\'\n#REQUEST_PROPOSAL_TRANSACTIONS_R"
  "EPLY\020\017\022&\n\"I_HAVE_SIGNATURE_CHAIN_TRANSAC"
  "TION\020\020\022\'\n#REQUEST_SIGNATURE_CHAIN_TRANSA"
  "CTION\020\021\022-\n)REQUEST_SIGNATURE_CHAIN_TRANS"
  "ACTION_REPLY\020\022\022\027\n\023PIN_SIGNATURE_CHAIN\020\023\022"
  "\035\n\031SIGNATURE_CHAIN_OBJECTION\020\024\022\016\n\nGET_ST"
  "ATES\020\025\022\024\n\020GET_STATES_REPLY\020\026*C\n\030AllowedS"
  "ignedMessageType\022\'\n#ALLOW_SIGNED_PLACEHO"
  "LDER_DO_NOT_USE\020\000*\343\007\n\032AllowedUnsignedMes"
  "sageType\022)\n%ALLOW_UNSIGNED_PLACEHOLDER_D"
  "O_NOT_USE\020\000\022\027\n\023ALLOW_UNSIGNED_VOTE\020\001\022(\n$"
  "ALLOW_UNSIGNED_I_HAVE_BLOCK_PROPOSAL\020\002\022)"
  "\n%ALLOW_UNSIGNED_REQUEST_BLOCK_PROPOSAL\020"
  "\003\022&\n\"ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY\020"
  "\004\022&\n\"ALLOW_UNSIGNED_GET_CONSENSUS_STATE\020"
  "\005\022,\n(ALLOW_UNSIGNED_GET_CONSENSUS_STATE_"
  "REPLY\020\006\022$\n ALLOW_UNSIGNED_GET_BLOCK_HEAD"
  "ERS\020\007\022*\n&ALLOW_UNSIGNED_GET_BLOCK_HEADER"
  "S_REPLY\020\010\022\035\n\031ALLOW_UNSIGNED_GET_BLOCKS\020\t"
  "\022#\n\037ALLOW_UNSIGNED_GET_BLOCKS_REPLY\020\n\022\030\n"
  "\024ALLOW_UNSIGNED_RELAY\020\013\022\037\n\033ALLOW_UNSIGNE"
  "D_TRANSACTIONS\020\014\022,\n(ALLOW_UNSIGNED_BACKT"
  "RACK_SIGNATURE_CHAIN\020\r\0220\n,ALLOW_UNSIGNED"
  "_REQUEST_PROPOSAL_TRANSACTIONS\020\016\0226\n2ALLO"
  "W_UNSIGNED_REQUEST_PROPOSAL_TRANSACTIONS"
  "_REPLY\020\017\0225\n1ALLOW_UNSIGNED_I_HAVE_SIGNAT"
  "URE_CHAIN_TRANSACTION\020\020\0226\n2ALLOW_UNSIGNE"
  "D_REQUEST_SIGNATURE_CHAIN_TRANSACTION\020\021\022"
  "<\n8ALLOW_UNSIGNED_REQUEST_SIGNATURE_CHAI"
  "N_TRANSACTION_REPLY\020\022\022&\n\"ALLOW_UNSIGNED_"
  "PIN_SIGNATURE_CHAIN\020\023\022,\n(ALLOW_UNSIGNED_"
  "SIGNATURE_CHAIN_OBJECTION\020\024\022\035\n\031ALLOW_UNS"
  "IGNED_GET_STATES\020\025\022#\n\037ALLOW_UNSIGNED_GET"
  "_STATES_REPLY\020\026*\374\006\n\030AllowedDirectMessage"
  "Type\022\'\n#ALLOW_DIRECT_PLACEHOLDER_DO_NOT_"
  "USE\020\000\022\025\n\021ALLOW_DIRECT_VOTE\020\001\022&\n\"ALLOW_DI"
  "RECT_I_HAVE_BLOCK_PROPOSAL\020\002\022\'\n#ALLOW_DI"
  "RECT_REQUEST_BLOCK_PROPOSAL\020\003\022$\n ALLOW_D"
  "IRECT_REQUEST_BLOCK_REPLY\020\004\022$\n ALLOW_DIR"
  "ECT_GET_CONSENSUS_STATE\020\005\022*\n&ALLOW_DIREC"
  "T_GET_CONSENSUS_STATE_REPLY\020\006\022\"\n\036ALLOW_D"
  "IRECT_GET_BLOCK_HEADERS\020\007\022(\n$ALLOW_DIREC"
  "T_GET_BLOCK_HEADERS_REPLY\020\010\022\033\n\027ALLOW_DIR"
  "ECT_GET_BLOCKS\020\t\022!\n\035ALLOW_DIRECT_GET_BLO"
  "CKS_REPLY\020\n\022*\n&ALLOW_DIRECT_BACKTRACK_SI"
  "GNATURE_CHAIN\020\r\022.\n*ALLOW_DIRECT_REQUEST_"
  "PROPOSAL_TRANSACTIONS\020\016\0224\n0ALLOW_DIRECT_"
  "REQUEST_PROPOSAL_TRANSACTIONS_REPLY\020\017\0223\n"
  "/ALLOW_DIRECT_I_HAVE_SIGNATURE_CHAIN_TRA"
  "NSACTION\020\020\0224\n0ALLOW_DIRECT_REQUEST_SIGNA"
  "TURE_CHAIN_TRANSACTION\020\021\022:\n6ALLOW_DIRECT"
  "_REQUEST_SIGNATURE_CHAIN_TRANSACTION_REP"
  "LY\020\022\022$\n ALLOW_DIRECT_PIN_SIGNATURE_CHAIN"
  "\020\023\022*\n&ALLOW_DIRECT_SIGNATURE_CHAIN_OBJEC"
  "TION\020\024\022\033\n\027ALLOW_DIRECT_GET_STATES\020\025\022!\n\035A"
  "LLOW_DIRECT_GET_STATES_REPLY\020\026*X\n\027Allowe"
  "dRelayMessageType\022&\n\"ALLOW_RELAY_PLACEHO"
  "LDER_DO_NOT_USE\020\000\022\025\n\021ALLOW_RELAY_RELAY\020\013"
  "*y\n\037AllowedBroadcastPushMessageType\022/\n+A"
  "LLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_U"
  "SE\020\000\022%\n!ALLOW_BROADCAST_PUSH_TRANSACTION"
  "S\020\014*R\n\037AllowedBroadcastPullMessageType\022/"
  "\n+ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NO"
  "T_USE\020\000*y\n\037AllowedBroadcastTreeMessageTy"
  "pe\022/\n+ALLOW_BROADCAST_TREE_PLACEHOLDER_D"
  "O_NOT_USE\020\000\022%\n!ALLOW_BROADCAST_TREE_TRAN"
  "SACTIONS\020\014*x\n\026RequestTransactionType\022\034\n\030"
  "REQUEST_FULL_TRANSACTION\020\000\022\034\n\030REQUEST_TR"
  "ANSACTION_HASH\020\001\022\"\n\036REQUEST_TRANSACTION_"
  "SHORT_HASH\020\002B\006Z\004./pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pb_2fnodemessage_2eproto_deps[4] = {
  &::descriptor_table_pb_2fblock_2eproto,
  &::descriptor_table_pb_2fnode_2eproto,
  &::descriptor_table_pb_2fsigchain_2eproto,
  &::descriptor_table_pb_2ftransaction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pb_2fnodemessage_2eproto_sccs[27] = {
  &scc_info_BacktrackSignatureChain_pb_2fnodemessage_2eproto.base,
  &scc_info_GetBlockHeaders_pb_2fnodemessage_2eproto.base,
  &scc_info_GetBlockHeadersReply_pb_2fnodemessage_2eproto.base,
  &scc_info_GetBlocks_pb_2fnodemessage_2eproto.base,
  &scc_info_GetBlocksReply_pb_2fnodemessage_2eproto.base,
  &scc_info_GetConsensusState_pb_2fnodemessage_2eproto.base,
  &scc_info_GetConsensusStateReply_pb_2fnodemessage_2eproto.base,
  &scc_info_GetStates_pb_2fnodemessage_2eproto.base,
  &scc_info_GetStatesReply_pb_2fnodemessage_2eproto.base,
  &scc_info_IHaveBlockProposal_pb_2fnodemessage_2eproto.base,
  &scc_info_IHaveSignatureChainTransaction_pb_2fnodemessage_2eproto.base,
  &scc_info_PinSignatureChain_pb_2fnodemessage_2eproto.base,
  &scc_info_Relay_pb_2fnodemessage_2eproto.base,
  &scc_info_RequestBlockProposal_pb_2fnodemessage_2eproto.base,
  &scc_info_RequestBlockProposalReply_pb_2fnodemessage_2eproto.base,
  &scc_info_RequestProposalTransactions_pb_2fnodemessage_2eproto.base,
  &scc_info_RequestProposalTransactionsReply_pb_2fnodemessage_2eproto.base,
  &scc_info_RequestSignatureChainTransaction_pb_2fnodemessage_2eproto.base,
  &scc_info_RequestSignatureChainTransactionReply_pb_2fnodemessage_2eproto.base,
  &scc_info_SignatureChainObjectionSigned_pb_2fnodemessage_2eproto.base,
  &scc_info_SignatureChainObjectionUnsigned_pb_2fnodemessage_2eproto.base,
  &scc_info_SignedMessage_pb_2fnodemessage_2eproto.base,
  &scc_info_StateNode_pb_2fnodemessage_2eproto.base,
  &scc_info_StateRequest_pb_2fnodemessage_2eproto.base,
  &scc_info_Transactions_pb_2fnodemessage_2eproto.base,
  &scc_info_UnsignedMessage_pb_2fnodemessage_2eproto.base,
  &scc_info_Vote_pb_2fnodemessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pb_2fnodemessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fnodemessage_2eproto = {
  false, false, descriptor_table_protodef_pb_2fnodemessage_2eproto, "pb/nodemessage.proto", 5268,
  &descriptor_table_pb_2fnodemessage_2eproto_once, descriptor_table_pb_2fnodemessage_2eproto_sccs, descriptor_table_pb_2fnodemessage_2eproto_deps, 27, 4,
  schemas, file_default_instances, TableStruct_pb_2fnodemessage_2eproto::offsets,
  file_level_metadata_pb_2fnodemessage_2eproto, 27, file_level_enum_descriptors_pb_2fnodemessage_2eproto, file_level_service_descriptors_pb_2fnodemessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pb_2fnodemessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pb_2fnodemessage_2eproto)), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fnodemessage_2eproto);
  return file_level_enum_descriptors_pb_2fnodemessage_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllowedSignedMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fnodemessage_2eproto);
  return file_level_enum_descriptors_pb_2fnodemessage_2eproto[1];
}
bool AllowedSignedMessageType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllowedUnsignedMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fnodemessage_2eproto);
  return file_level_enum_descriptors_pb_2fnodemessage_2eproto[2];
}
bool AllowedUnsignedMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllowedDirectMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fnodemessage_2eproto);
  return file_level_enum_descriptors_pb_2fnodemessage_2eproto[3];
}
bool AllowedDirectMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllowedRelayMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fnodemessage_2eproto);
  return file_level_enum_descriptors_pb_2fnodemessage_2eproto[4];
}
bool AllowedRelayMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllowedBroadcastPushMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fnodemessage_2eproto);
  return file_level_enum_descriptors_pb_2fnodemessage_2eproto[5];
}
bool AllowedBroadcastPushMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllowedBroadcastPullMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fnodemessage_2eproto);
  return file_level_enum_descriptors_pb_2fnodemessage_2eproto[6];
}
bool AllowedBroadcastPullMessageType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllowedBroadcastTreeMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fnodemessage_2eproto);
  return file_level_enum_descriptors_pb_2fnodemessage_2eproto[7];
}
bool AllowedBroadcastTreeMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestTransactionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fnodemessage_2eproto);
  return file_level_enum_descriptors_pb_2fnodemessage_2eproto[8];
}
bool RequestTransactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UnsignedMessage::_Internal {
 public:
};

UnsignedMessage::UnsignedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.UnsignedMessage)
}
UnsignedMessage::UnsignedMessage(const UnsignedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:pb.UnsignedMessage)
}

void UnsignedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsignedMessage_pb_2fnodemessage_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0;
}

UnsignedMessage::~UnsignedMessage() {
  // @@protoc_insertion_point(destructor:pb.UnsignedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsignedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnsignedMessage::ArenaDtor(void* object) {
  UnsignedMessage* _this = reinterpret_cast< UnsignedMessage* >(object);
  (void)_this;
}
void UnsignedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsignedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsignedMessage& UnsignedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsignedMessage_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void UnsignedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UnsignedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  message_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsignedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.MessageType message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::pb::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsignedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UnsignedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.MessageType message_type = 1;
  if (this->message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_message_type(), target);
  }

  // bytes message = 2;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.UnsignedMessage)
  return target;
}

size_t UnsignedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UnsignedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // .pb.MessageType message_type = 1;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsignedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UnsignedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsignedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsignedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UnsignedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UnsignedMessage)
    MergeFrom(*source);
  }
}

void UnsignedMessage::MergeFrom(const UnsignedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UnsignedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
}

void UnsignedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UnsignedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsignedMessage::CopyFrom(const UnsignedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UnsignedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsignedMessage::IsInitialized() const {
  return true;
}

void UnsignedMessage::InternalSwap(UnsignedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(message_type_, other->message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsignedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignedMessage::_Internal {
 public:
};

SignedMessage::SignedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SignedMessage)
}
SignedMessage::SignedMessage(const SignedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.SignedMessage)
}

void SignedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignedMessage_pb_2fnodemessage_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SignedMessage::~SignedMessage() {
  // @@protoc_insertion_point(destructor:pb.SignedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignedMessage::ArenaDtor(void* object) {
  SignedMessage* _this = reinterpret_cast< SignedMessage* >(object);
  (void)_this;
}
void SignedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedMessage& SignedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignedMessage_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void SignedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SignedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SignedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message = 1;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SignedMessage)
  return target;
}

size_t SignedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SignedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SignedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SignedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SignedMessage)
    MergeFrom(*source);
  }
}

void SignedMessage::MergeFrom(const SignedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SignedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
}

void SignedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SignedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedMessage::CopyFrom(const SignedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SignedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedMessage::IsInitialized() const {
  return true;
}

void SignedMessage::InternalSwap(SignedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vote::_Internal {
 public:
};

Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArena());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:pb.Vote)
}

void Vote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vote_pb_2fnodemessage_2eproto.base);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = 0u;
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:pb.Vote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Vote::ArenaDtor(void* object) {
  Vote* _this = reinterpret_cast< Vote* >(object);
  (void)_this;
}
void Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vote& Vote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vote_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_hash_.ClearToEmpty();
  height_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_height(), target);
  }

  // bytes block_hash = 2;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_hash = 2;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // uint32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const Vote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Vote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Vote)
    MergeFrom(*source);
  }
}

void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Vote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IHaveBlockProposal::_Internal {
 public:
};

IHaveBlockProposal::IHaveBlockProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.IHaveBlockProposal)
}
IHaveBlockProposal::IHaveBlockProposal(const IHaveBlockProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArena());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:pb.IHaveBlockProposal)
}

void IHaveBlockProposal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IHaveBlockProposal_pb_2fnodemessage_2eproto.base);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = 0u;
}

IHaveBlockProposal::~IHaveBlockProposal() {
  // @@protoc_insertion_point(destructor:pb.IHaveBlockProposal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IHaveBlockProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IHaveBlockProposal::ArenaDtor(void* object) {
  IHaveBlockProposal* _this = reinterpret_cast< IHaveBlockProposal* >(object);
  (void)_this;
}
void IHaveBlockProposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IHaveBlockProposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IHaveBlockProposal& IHaveBlockProposal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IHaveBlockProposal_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void IHaveBlockProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.IHaveBlockProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_hash_.ClearToEmpty();
  height_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IHaveBlockProposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IHaveBlockProposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.IHaveBlockProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_height(), target);
  }

  // bytes block_hash = 2;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.IHaveBlockProposal)
  return target;
}

size_t IHaveBlockProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.IHaveBlockProposal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_hash = 2;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // uint32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IHaveBlockProposal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.IHaveBlockProposal)
  GOOGLE_DCHECK_NE(&from, this);
  const IHaveBlockProposal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IHaveBlockProposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.IHaveBlockProposal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.IHaveBlockProposal)
    MergeFrom(*source);
  }
}

void IHaveBlockProposal::MergeFrom(const IHaveBlockProposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.IHaveBlockProposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void IHaveBlockProposal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.IHaveBlockProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IHaveBlockProposal::CopyFrom(const IHaveBlockProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.IHaveBlockProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IHaveBlockProposal::IsInitialized() const {
  return true;
}

void IHaveBlockProposal::InternalSwap(IHaveBlockProposal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IHaveBlockProposal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestBlockProposal::_Internal {
 public:
};

RequestBlockProposal::RequestBlockProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.RequestBlockProposal)
}
RequestBlockProposal::RequestBlockProposal(const RequestBlockProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArena());
  }
  short_hash_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_short_hash_salt().empty()) {
    short_hash_salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_short_hash_salt(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&short_hash_size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(short_hash_size_));
  // @@protoc_insertion_point(copy_constructor:pb.RequestBlockProposal)
}

void RequestBlockProposal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestBlockProposal_pb_2fnodemessage_2eproto.base);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_hash_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&short_hash_size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(short_hash_size_));
}

RequestBlockProposal::~RequestBlockProposal() {
  // @@protoc_insertion_point(destructor:pb.RequestBlockProposal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestBlockProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_hash_salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestBlockProposal::ArenaDtor(void* object) {
  RequestBlockProposal* _this = reinterpret_cast< RequestBlockProposal* >(object);
  (void)_this;
}
void RequestBlockProposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBlockProposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestBlockProposal& RequestBlockProposal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestBlockProposal_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void RequestBlockProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RequestBlockProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_hash_.ClearToEmpty();
  short_hash_salt_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&short_hash_size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(short_hash_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBlockProposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RequestTransactionType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb::RequestTransactionType>(val));
        } else goto handle_unusual;
        continue;
      // bytes short_hash_salt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_short_hash_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 short_hash_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          short_hash_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestBlockProposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RequestBlockProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_hash = 1;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_hash(), target);
  }

  // .pb.RequestTransactionType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bytes short_hash_salt = 3;
  if (this->short_hash_salt().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_short_hash_salt(), target);
  }

  // uint32 short_hash_size = 4;
  if (this->short_hash_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_short_hash_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RequestBlockProposal)
  return target;
}

size_t RequestBlockProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RequestBlockProposal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_hash = 1;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes short_hash_salt = 3;
  if (this->short_hash_salt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_short_hash_salt());
  }

  // .pb.RequestTransactionType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 short_hash_size = 4;
  if (this->short_hash_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_short_hash_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestBlockProposal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RequestBlockProposal)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBlockProposal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestBlockProposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RequestBlockProposal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RequestBlockProposal)
    MergeFrom(*source);
  }
}

void RequestBlockProposal::MergeFrom(const RequestBlockProposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RequestBlockProposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.short_hash_salt().size() > 0) {
    _internal_set_short_hash_salt(from._internal_short_hash_salt());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.short_hash_size() != 0) {
    _internal_set_short_hash_size(from._internal_short_hash_size());
  }
}

void RequestBlockProposal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RequestBlockProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBlockProposal::CopyFrom(const RequestBlockProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RequestBlockProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBlockProposal::IsInitialized() const {
  return true;
}

void RequestBlockProposal::InternalSwap(RequestBlockProposal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  short_hash_salt_.Swap(&other->short_hash_salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBlockProposal, short_hash_size_)
      + sizeof(RequestBlockProposal::short_hash_size_)
      - PROTOBUF_FIELD_OFFSET(RequestBlockProposal, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBlockProposal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestBlockProposalReply::_Internal {
 public:
  static const ::pb::Block& block(const RequestBlockProposalReply* msg);
};

const ::pb::Block&
RequestBlockProposalReply::_Internal::block(const RequestBlockProposalReply* msg) {
  return *msg->block_;
}
void RequestBlockProposalReply::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
RequestBlockProposalReply::RequestBlockProposalReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_hash_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.RequestBlockProposalReply)
}
RequestBlockProposalReply::RequestBlockProposalReply(const RequestBlockProposalReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_hash_(from.transactions_hash_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::pb::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RequestBlockProposalReply)
}

void RequestBlockProposalReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestBlockProposalReply_pb_2fnodemessage_2eproto.base);
  block_ = nullptr;
}

RequestBlockProposalReply::~RequestBlockProposalReply() {
  // @@protoc_insertion_point(destructor:pb.RequestBlockProposalReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestBlockProposalReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void RequestBlockProposalReply::ArenaDtor(void* object) {
  RequestBlockProposalReply* _this = reinterpret_cast< RequestBlockProposalReply* >(object);
  (void)_this;
}
void RequestBlockProposalReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBlockProposalReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestBlockProposalReply& RequestBlockProposalReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestBlockProposalReply_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void RequestBlockProposalReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RequestBlockProposalReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_hash_.Clear();
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBlockProposalReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes transactions_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions_hash();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestBlockProposalReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RequestBlockProposalReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Block block = 1;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // repeated bytes transactions_hash = 2;
  for (int i = 0, n = this->_internal_transactions_hash_size(); i < n; i++) {
    const auto& s = this->_internal_transactions_hash(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RequestBlockProposalReply)
  return target;
}

size_t RequestBlockProposalReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RequestBlockProposalReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions_hash = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_hash_.size());
  for (int i = 0, n = transactions_hash_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transactions_hash_.Get(i));
  }

  // .pb.Block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestBlockProposalReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RequestBlockProposalReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBlockProposalReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestBlockProposalReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RequestBlockProposalReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RequestBlockProposalReply)
    MergeFrom(*source);
  }
}

void RequestBlockProposalReply::MergeFrom(const RequestBlockProposalReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RequestBlockProposalReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_hash_.MergeFrom(from.transactions_hash_);
  if (from.has_block()) {
    _internal_mutable_block()->::pb::Block::MergeFrom(from._internal_block());
  }
}

void RequestBlockProposalReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RequestBlockProposalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBlockProposalReply::CopyFrom(const RequestBlockProposalReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RequestBlockProposalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBlockProposalReply::IsInitialized() const {
  return true;
}

void RequestBlockProposalReply::InternalSwap(RequestBlockProposalReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_hash_.InternalSwap(&other->transactions_hash_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBlockProposalReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestProposalTransactions::_Internal {
 public:
};

RequestProposalTransactions::RequestProposalTransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_hash_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.RequestProposalTransactions)
}
RequestProposalTransactions::RequestProposalTransactions(const RequestProposalTransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_hash_(from.transactions_hash_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArena());
  }
  short_hash_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_short_hash_salt().empty()) {
    short_hash_salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_short_hash_salt(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&short_hash_size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(short_hash_size_));
  // @@protoc_insertion_point(copy_constructor:pb.RequestProposalTransactions)
}

void RequestProposalTransactions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestProposalTransactions_pb_2fnodemessage_2eproto.base);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_hash_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&short_hash_size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(short_hash_size_));
}

RequestProposalTransactions::~RequestProposalTransactions() {
  // @@protoc_insertion_point(destructor:pb.RequestProposalTransactions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestProposalTransactions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_hash_salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestProposalTransactions::ArenaDtor(void* object) {
  RequestProposalTransactions* _this = reinterpret_cast< RequestProposalTransactions* >(object);
  (void)_this;
}
void RequestProposalTransactions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestProposalTransactions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestProposalTransactions& RequestProposalTransactions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestProposalTransactions_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void RequestProposalTransactions::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RequestProposalTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_hash_.Clear();
  block_hash_.ClearToEmpty();
  short_hash_salt_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&short_hash_size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(short_hash_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestProposalTransactions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.RequestTransactionType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb::RequestTransactionType>(val));
        } else goto handle_unusual;
        continue;
      // bytes short_hash_salt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_short_hash_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 short_hash_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          short_hash_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes transactions_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions_hash();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestProposalTransactions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RequestProposalTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_hash = 1;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_hash(), target);
  }

  // .pb.RequestTransactionType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bytes short_hash_salt = 3;
  if (this->short_hash_salt().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_short_hash_salt(), target);
  }

  // uint32 short_hash_size = 4;
  if (this->short_hash_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_short_hash_size(), target);
  }

  // repeated bytes transactions_hash = 5;
  for (int i = 0, n = this->_internal_transactions_hash_size(); i < n; i++) {
    const auto& s = this->_internal_transactions_hash(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RequestProposalTransactions)
  return target;
}

size_t RequestProposalTransactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RequestProposalTransactions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions_hash = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_hash_.size());
  for (int i = 0, n = transactions_hash_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transactions_hash_.Get(i));
  }

  // bytes block_hash = 1;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes short_hash_salt = 3;
  if (this->short_hash_salt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_short_hash_salt());
  }

  // .pb.RequestTransactionType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 short_hash_size = 4;
  if (this->short_hash_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_short_hash_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestProposalTransactions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RequestProposalTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestProposalTransactions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestProposalTransactions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RequestProposalTransactions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RequestProposalTransactions)
    MergeFrom(*source);
  }
}

void RequestProposalTransactions::MergeFrom(const RequestProposalTransactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RequestProposalTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_hash_.MergeFrom(from.transactions_hash_);
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.short_hash_salt().size() > 0) {
    _internal_set_short_hash_salt(from._internal_short_hash_salt());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.short_hash_size() != 0) {
    _internal_set_short_hash_size(from._internal_short_hash_size());
  }
}

void RequestProposalTransactions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RequestProposalTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProposalTransactions::CopyFrom(const RequestProposalTransactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RequestProposalTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProposalTransactions::IsInitialized() const {
  return true;
}

void RequestProposalTransactions::InternalSwap(RequestProposalTransactions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_hash_.InternalSwap(&other->transactions_hash_);
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  short_hash_salt_.Swap(&other->short_hash_salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestProposalTransactions, short_hash_size_)
      + sizeof(RequestProposalTransactions::short_hash_size_)
      - PROTOBUF_FIELD_OFFSET(RequestProposalTransactions, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestProposalTransactions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestProposalTransactionsReply::_Internal {
 public:
};

void RequestProposalTransactionsReply::clear_transactions() {
  transactions_.Clear();
}
RequestProposalTransactionsReply::RequestProposalTransactionsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.RequestProposalTransactionsReply)
}
RequestProposalTransactionsReply::RequestProposalTransactionsReply(const RequestProposalTransactionsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RequestProposalTransactionsReply)
}

void RequestProposalTransactionsReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestProposalTransactionsReply_pb_2fnodemessage_2eproto.base);
}

RequestProposalTransactionsReply::~RequestProposalTransactionsReply() {
  // @@protoc_insertion_point(destructor:pb.RequestProposalTransactionsReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestProposalTransactionsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestProposalTransactionsReply::ArenaDtor(void* object) {
  RequestProposalTransactionsReply* _this = reinterpret_cast< RequestProposalTransactionsReply* >(object);
  (void)_this;
}
void RequestProposalTransactionsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestProposalTransactionsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestProposalTransactionsReply& RequestProposalTransactionsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestProposalTransactionsReply_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void RequestProposalTransactionsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RequestProposalTransactionsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestProposalTransactionsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestProposalTransactionsReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RequestProposalTransactionsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RequestProposalTransactionsReply)
  return target;
}

size_t RequestProposalTransactionsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RequestProposalTransactionsReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestProposalTransactionsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RequestProposalTransactionsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestProposalTransactionsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestProposalTransactionsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RequestProposalTransactionsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RequestProposalTransactionsReply)
    MergeFrom(*source);
  }
}

void RequestProposalTransactionsReply::MergeFrom(const RequestProposalTransactionsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RequestProposalTransactionsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void RequestProposalTransactionsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RequestProposalTransactionsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProposalTransactionsReply::CopyFrom(const RequestProposalTransactionsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RequestProposalTransactionsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProposalTransactionsReply::IsInitialized() const {
  return true;
}

void RequestProposalTransactionsReply::InternalSwap(RequestProposalTransactionsReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestProposalTransactionsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetConsensusState::_Internal {
 public:
};

GetConsensusState::GetConsensusState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetConsensusState)
}
GetConsensusState::GetConsensusState(const GetConsensusState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetConsensusState)
}

void GetConsensusState::SharedCtor() {
}

GetConsensusState::~GetConsensusState() {
  // @@protoc_insertion_point(destructor:pb.GetConsensusState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConsensusState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetConsensusState::ArenaDtor(void* object) {
  GetConsensusState* _this = reinterpret_cast< GetConsensusState* >(object);
  (void)_this;
}
void GetConsensusState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConsensusState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConsensusState& GetConsensusState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConsensusState_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void GetConsensusState::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetConsensusState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsensusState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConsensusState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetConsensusState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetConsensusState)
  return target;
}

size_t GetConsensusState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetConsensusState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConsensusState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetConsensusState)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConsensusState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConsensusState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetConsensusState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetConsensusState)
    MergeFrom(*source);
  }
}

void GetConsensusState::MergeFrom(const GetConsensusState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetConsensusState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetConsensusState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetConsensusState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsensusState::CopyFrom(const GetConsensusState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetConsensusState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsensusState::IsInitialized() const {
  return true;
}

void GetConsensusState::InternalSwap(GetConsensusState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsensusState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetConsensusStateReply::_Internal {
 public:
};

GetConsensusStateReply::GetConsensusStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetConsensusStateReply)
}
GetConsensusStateReply::GetConsensusStateReply(const GetConsensusStateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ledger_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ledger_block_hash().empty()) {
    ledger_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ledger_block_hash(), 
      GetArena());
  }
  ::memcpy(&ledger_height_, &from.ledger_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_verifiable_height_) -
    reinterpret_cast<char*>(&ledger_height_)) + sizeof(min_verifiable_height_));
  // @@protoc_insertion_point(copy_constructor:pb.GetConsensusStateReply)
}

void GetConsensusStateReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConsensusStateReply_pb_2fnodemessage_2eproto.base);
  ledger_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ledger_height_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&min_verifiable_height_) -
      reinterpret_cast<char*>(&ledger_height_)) + sizeof(min_verifiable_height_));
}

GetConsensusStateReply::~GetConsensusStateReply() {
  // @@protoc_insertion_point(destructor:pb.GetConsensusStateReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConsensusStateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ledger_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetConsensusStateReply::ArenaDtor(void* object) {
  GetConsensusStateReply* _this = reinterpret_cast< GetConsensusStateReply* >(object);
  (void)_this;
}
void GetConsensusStateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConsensusStateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConsensusStateReply& GetConsensusStateReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConsensusStateReply_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void GetConsensusStateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetConsensusStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ledger_block_hash_.ClearToEmpty();
  ::memset(&ledger_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_verifiable_height_) -
      reinterpret_cast<char*>(&ledger_height_)) + sizeof(min_verifiable_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsensusStateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ledger_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ledger_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ledger_block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ledger_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 consensus_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          consensus_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.SyncState sync_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sync_state(static_cast<::pb::SyncState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 min_verifiable_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_verifiable_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConsensusStateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetConsensusStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ledger_height = 1;
  if (this->ledger_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ledger_height(), target);
  }

  // bytes ledger_block_hash = 2;
  if (this->ledger_block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ledger_block_hash(), target);
  }

  // uint32 consensus_height = 3;
  if (this->consensus_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_consensus_height(), target);
  }

  // .pb.SyncState sync_state = 4;
  if (this->sync_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sync_state(), target);
  }

  // uint32 min_verifiable_height = 5;
  if (this->min_verifiable_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_min_verifiable_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetConsensusStateReply)
  return target;
}

size_t GetConsensusStateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetConsensusStateReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ledger_block_hash = 2;
  if (this->ledger_block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ledger_block_hash());
  }

  // uint32 ledger_height = 1;
  if (this->ledger_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ledger_height());
  }

  // uint32 consensus_height = 3;
  if (this->consensus_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_consensus_height());
  }

  // .pb.SyncState sync_state = 4;
  if (this->sync_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sync_state());
  }

  // uint32 min_verifiable_height = 5;
  if (this->min_verifiable_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_verifiable_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConsensusStateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetConsensusStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConsensusStateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConsensusStateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetConsensusStateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetConsensusStateReply)
    MergeFrom(*source);
  }
}

void GetConsensusStateReply::MergeFrom(const GetConsensusStateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetConsensusStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ledger_block_hash().size() > 0) {
    _internal_set_ledger_block_hash(from._internal_ledger_block_hash());
  }
  if (from.ledger_height() != 0) {
    _internal_set_ledger_height(from._internal_ledger_height());
  }
  if (from.consensus_height() != 0) {
    _internal_set_consensus_height(from._internal_consensus_height());
  }
  if (from.sync_state() != 0) {
    _internal_set_sync_state(from._internal_sync_state());
  }
  if (from.min_verifiable_height() != 0) {
    _internal_set_min_verifiable_height(from._internal_min_verifiable_height());
  }
}

void GetConsensusStateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetConsensusStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsensusStateReply::CopyFrom(const GetConsensusStateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetConsensusStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsensusStateReply::IsInitialized() const {
  return true;
}

void GetConsensusStateReply::InternalSwap(GetConsensusStateReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ledger_block_hash_.Swap(&other->ledger_block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetConsensusStateReply, min_verifiable_height_)
      + sizeof(GetConsensusStateReply::min_verifiable_height_)
      - PROTOBUF_FIELD_OFFSET(GetConsensusStateReply, ledger_height_)>(
          reinterpret_cast<char*>(&ledger_height_),
          reinterpret_cast<char*>(&other->ledger_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsensusStateReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBlockHeaders::_Internal {
 public:
};

GetBlockHeaders::GetBlockHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockHeaders)
}
GetBlockHeaders::GetBlockHeaders(const GetBlockHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_height_, &from.start_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
    reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockHeaders)
}

void GetBlockHeaders::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_height_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
}

GetBlockHeaders::~GetBlockHeaders() {
  // @@protoc_insertion_point(destructor:pb.GetBlockHeaders)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlockHeaders::ArenaDtor(void* object) {
  GetBlockHeaders* _this = reinterpret_cast< GetBlockHeaders* >(object);
  (void)_this;
}
void GetBlockHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockHeaders& GetBlockHeaders::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockHeaders_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void GetBlockHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 start_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockHeaders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_height = 1;
  if (this->start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_height(), target);
  }

  // uint32 end_height = 2;
  if (this->end_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockHeaders)
  return target;
}

size_t GetBlockHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockHeaders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_height = 1;
  if (this->start_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_height());
  }

  // uint32 end_height = 2;
  if (this->end_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockHeaders::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockHeaders* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockHeaders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockHeaders)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockHeaders)
    MergeFrom(*source);
  }
}

void GetBlockHeaders::MergeFrom(const GetBlockHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_height() != 0) {
    _internal_set_start_height(from._internal_start_height());
  }
  if (from.end_height() != 0) {
    _internal_set_end_height(from._internal_end_height());
  }
}

void GetBlockHeaders::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockHeaders::CopyFrom(const GetBlockHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockHeaders::IsInitialized() const {
  return true;
}

void GetBlockHeaders::InternalSwap(GetBlockHeaders* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlockHeaders, end_height_)
      + sizeof(GetBlockHeaders::end_height_)
      - PROTOBUF_FIELD_OFFSET(GetBlockHeaders, start_height_)>(
          reinterpret_cast<char*>(&start_height_),
          reinterpret_cast<char*>(&other->start_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockHeaders::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBlockHeadersReply::_Internal {
 public:
};

void GetBlockHeadersReply::clear_block_headers() {
  block_headers_.Clear();
}
GetBlockHeadersReply::GetBlockHeadersReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  block_headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockHeadersReply)
}
GetBlockHeadersReply::GetBlockHeadersReply(const GetBlockHeadersReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_headers_(from.block_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockHeadersReply)
}

void GetBlockHeadersReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockHeadersReply_pb_2fnodemessage_2eproto.base);
}

GetBlockHeadersReply::~GetBlockHeadersReply() {
  // @@protoc_insertion_point(destructor:pb.GetBlockHeadersReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockHeadersReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlockHeadersReply::ArenaDtor(void* object) {
  GetBlockHeadersReply* _this = reinterpret_cast< GetBlockHeadersReply* >(object);
  (void)_this;
}
void GetBlockHeadersReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockHeadersReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockHeadersReply& GetBlockHeadersReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockHeadersReply_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void GetBlockHeadersReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockHeadersReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_headers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockHeadersReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.Header block_headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockHeadersReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockHeadersReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Header block_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_block_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockHeadersReply)
  return target;
}

size_t GetBlockHeadersReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockHeadersReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Header block_headers = 1;
  total_size += 1UL * this->_internal_block_headers_size();
  for (const auto& msg : this->block_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockHeadersReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockHeadersReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockHeadersReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockHeadersReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockHeadersReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockHeadersReply)
    MergeFrom(*source);
  }
}

void GetBlockHeadersReply::MergeFrom(const GetBlockHeadersReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockHeadersReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_headers_.MergeFrom(from.block_headers_);
}

void GetBlockHeadersReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockHeadersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockHeadersReply::CopyFrom(const GetBlockHeadersReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockHeadersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockHeadersReply::IsInitialized() const {
  return true;
}

void GetBlockHeadersReply::InternalSwap(GetBlockHeadersReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_headers_.InternalSwap(&other->block_headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockHeadersReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBlocks::_Internal {
 public:
};

GetBlocks::GetBlocks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlocks)
}
GetBlocks::GetBlocks(const GetBlocks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_height_, &from.start_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
    reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  // @@protoc_insertion_point(copy_constructor:pb.GetBlocks)
}

void GetBlocks::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_height_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
}

GetBlocks::~GetBlocks() {
  // @@protoc_insertion_point(destructor:pb.GetBlocks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlocks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlocks::ArenaDtor(void* object) {
  GetBlocks* _this = reinterpret_cast< GetBlocks* >(object);
  (void)_this;
}
void GetBlocks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlocks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlocks& GetBlocks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlocks_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void GetBlocks::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlocks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlocks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 start_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlocks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlocks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_height = 1;
  if (this->start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_height(), target);
  }

  // uint32 end_height = 2;
  if (this->end_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlocks)
  return target;
}

size_t GetBlocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlocks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_height = 1;
  if (this->start_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_height());
  }

  // uint32 end_height = 2;
  if (this->end_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlocks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlocks)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlocks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlocks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlocks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlocks)
    MergeFrom(*source);
  }
}

void GetBlocks::MergeFrom(const GetBlocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlocks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_height() != 0) {
    _internal_set_start_height(from._internal_start_height());
  }
  if (from.end_height() != 0) {
    _internal_set_end_height(from._internal_end_height());
  }
}

void GetBlocks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlocks::CopyFrom(const GetBlocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlocks::IsInitialized() const {
  return true;
}

void GetBlocks::InternalSwap(GetBlocks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlocks, end_height_)
      + sizeof(GetBlocks::end_height_)
      - PROTOBUF_FIELD_OFFSET(GetBlocks, start_height_)>(
          reinterpret_cast<char*>(&start_height_),
          reinterpret_cast<char*>(&other->start_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlocks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBlocksReply::_Internal {
 public:
};

void GetBlocksReply::clear_blocks() {
  blocks_.Clear();
}
GetBlocksReply::GetBlocksReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlocksReply)
}
GetBlocksReply::GetBlocksReply(const GetBlocksReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetBlocksReply)
}

void GetBlocksReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlocksReply_pb_2fnodemessage_2eproto.base);
}

GetBlocksReply::~GetBlocksReply() {
  // @@protoc_insertion_point(destructor:pb.GetBlocksReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlocksReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlocksReply::ArenaDtor(void* object) {
  GetBlocksReply* _this = reinterpret_cast< GetBlocksReply* >(object);
  (void)_this;
}
void GetBlocksReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlocksReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlocksReply& GetBlocksReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlocksReply_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void GetBlocksReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlocksReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.Block blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlocksReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Block blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlocksReply)
  return target;
}

size_t GetBlocksReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlocksReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Block blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlocksReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlocksReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlocksReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlocksReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlocksReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlocksReply)
    MergeFrom(*source);
  }
}

void GetBlocksReply::MergeFrom(const GetBlocksReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlocksReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
}

void GetBlocksReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlocksReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlocksReply::CopyFrom(const GetBlocksReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlocksReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlocksReply::IsInitialized() const {
  return true;
}

void GetBlocksReply::InternalSwap(GetBlocksReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlocksReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StateRequest::_Internal {
 public:
};

StateRequest::StateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.StateRequest)
}
StateRequest::StateRequest(const StateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.StateRequest)
}

void StateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateRequest_pb_2fnodemessage_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StateRequest::~StateRequest() {
  // @@protoc_insertion_point(destructor:pb.StateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StateRequest::ArenaDtor(void* object) {
  StateRequest* _this = reinterpret_cast< StateRequest* >(object);
  (void)_this;
}
void StateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateRequest& StateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateRequest_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void StateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.StateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StateRequest)
  return target;
}

size_t StateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.StateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.StateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.StateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.StateRequest)
    MergeFrom(*source);
  }
}

void StateRequest::MergeFrom(const StateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.StateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void StateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.StateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateRequest::CopyFrom(const StateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.StateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateRequest::IsInitialized() const {
  return true;
}

void StateRequest::InternalSwap(StateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StateNode::_Internal {
 public:
};

StateNode::StateNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.StateNode)
}
StateNode::StateNode(const StateNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node().empty()) {
    node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.StateNode)
}

void StateNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateNode_pb_2fnodemessage_2eproto.base);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StateNode::~StateNode() {
  // @@protoc_insertion_point(destructor:pb.StateNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StateNode::ArenaDtor(void* object) {
  StateNode* _this = reinterpret_cast< StateNode* >(object);
  (void)_this;
}
void StateNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateNode& StateNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateNode_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void StateNode::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.StateNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StateNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node = 1;
  if (this->node().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StateNode)
  return target;
}

size_t StateNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.StateNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node = 1;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.StateNode)
  GOOGLE_DCHECK_NE(&from, this);
  const StateNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.StateNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.StateNode)
    MergeFrom(*source);
  }
}

void StateNode::MergeFrom(const StateNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.StateNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node().size() > 0) {
    _internal_set_node(from._internal_node());
  }
}

void StateNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.StateNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateNode::CopyFrom(const StateNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.StateNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateNode::IsInitialized() const {
  return true;
}

void StateNode::InternalSwap(StateNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_.Swap(&other->node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StateNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetStates::_Internal {
 public:
};

GetStates::GetStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reqs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetStates)
}
GetStates::GetStates(const GetStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reqs_(from.reqs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetStates)
}

void GetStates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStates_pb_2fnodemessage_2eproto.base);
}

GetStates::~GetStates() {
  // @@protoc_insertion_point(destructor:pb.GetStates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetStates::ArenaDtor(void* object) {
  GetStates* _this = reinterpret_cast< GetStates* >(object);
  (void)_this;
}
void GetStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStates& GetStates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStates_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void GetStates::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reqs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.StateRequest reqs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reqs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.StateRequest reqs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reqs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reqs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetStates)
  return target;
}

size_t GetStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.StateRequest reqs = 1;
  total_size += 1UL * this->_internal_reqs_size();
  for (const auto& msg : this->reqs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetStates)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetStates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetStates)
    MergeFrom(*source);
  }
}

void GetStates::MergeFrom(const GetStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reqs_.MergeFrom(from.reqs_);
}

void GetStates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStates::CopyFrom(const GetStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStates::IsInitialized() const {
  return true;
}

void GetStates::InternalSwap(GetStates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reqs_.InternalSwap(&other->reqs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetStatesReply::_Internal {
 public:
};

GetStatesReply::GetStatesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetStatesReply)
}
GetStatesReply::GetStatesReply(const GetStatesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetStatesReply)
}

void GetStatesReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatesReply_pb_2fnodemessage_2eproto.base);
}

GetStatesReply::~GetStatesReply() {
  // @@protoc_insertion_point(destructor:pb.GetStatesReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStatesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetStatesReply::ArenaDtor(void* object) {
  GetStatesReply* _this = reinterpret_cast< GetStatesReply* >(object);
  (void)_this;
}
void GetStatesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatesReply& GetStatesReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatesReply_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void GetStatesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetStatesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.StateNode nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatesReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetStatesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.StateNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetStatesReply)
  return target;
}

size_t GetStatesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetStatesReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.StateNode nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatesReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetStatesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatesReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatesReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetStatesReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetStatesReply)
    MergeFrom(*source);
  }
}

void GetStatesReply::MergeFrom(const GetStatesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetStatesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void GetStatesReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetStatesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatesReply::CopyFrom(const GetStatesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetStatesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatesReply::IsInitialized() const {
  return true;
}

void GetStatesReply::InternalSwap(GetStatesReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatesReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Relay::_Internal {
 public:
};

Relay::Relay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Relay)
}
Relay::Relay(const Relay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_identifier().empty()) {
    src_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_identifier(), 
      GetArena());
  }
  dest_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest_id().empty()) {
    dest_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dest_id(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  src_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_pubkey().empty()) {
    src_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_pubkey(), 
      GetArena());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArena());
  }
  last_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_hash().empty()) {
    last_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_hash(), 
      GetArena());
  }
  ::memcpy(&max_holding_seconds_, &from.max_holding_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&sig_chain_len_) -
    reinterpret_cast<char*>(&max_holding_seconds_)) + sizeof(sig_chain_len_));
  // @@protoc_insertion_point(copy_constructor:pb.Relay)
}

void Relay::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Relay_pb_2fnodemessage_2eproto.base);
  src_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_holding_seconds_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sig_chain_len_) -
      reinterpret_cast<char*>(&max_holding_seconds_)) + sizeof(sig_chain_len_));
}

Relay::~Relay() {
  // @@protoc_insertion_point(destructor:pb.Relay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Relay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  src_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Relay::ArenaDtor(void* object) {
  Relay* _this = reinterpret_cast< Relay* >(object);
  (void)_this;
}
void Relay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Relay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Relay& Relay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Relay_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void Relay::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Relay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_identifier_.ClearToEmpty();
  dest_id_.ClearToEmpty();
  payload_.ClearToEmpty();
  src_pubkey_.ClearToEmpty();
  block_hash_.ClearToEmpty();
  last_hash_.ClearToEmpty();
  ::memset(&max_holding_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sig_chain_len_) -
      reinterpret_cast<char*>(&max_holding_seconds_)) + sizeof(sig_chain_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string src_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Relay.src_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dest_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dest_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_holding_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_holding_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes src_pubkey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_src_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes last_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sig_chain_len = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sig_chain_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Relay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Relay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string src_identifier = 1;
  if (this->src_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_identifier().data(), static_cast<int>(this->_internal_src_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Relay.src_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src_identifier(), target);
  }

  // bytes dest_id = 2;
  if (this->dest_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_dest_id(), target);
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // uint32 max_holding_seconds = 5;
  if (this->max_holding_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_holding_seconds(), target);
  }

  // bytes src_pubkey = 6;
  if (this->src_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_src_pubkey(), target);
  }

  // bytes block_hash = 7;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_block_hash(), target);
  }

  // bytes last_hash = 8;
  if (this->last_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_last_hash(), target);
  }

  // uint32 sig_chain_len = 9;
  if (this->sig_chain_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sig_chain_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Relay)
  return target;
}

size_t Relay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Relay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src_identifier = 1;
  if (this->src_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_identifier());
  }

  // bytes dest_id = 2;
  if (this->dest_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dest_id());
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // bytes src_pubkey = 6;
  if (this->src_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_src_pubkey());
  }

  // bytes block_hash = 7;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes last_hash = 8;
  if (this->last_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_hash());
  }

  // uint32 max_holding_seconds = 5;
  if (this->max_holding_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_holding_seconds());
  }

  // uint32 sig_chain_len = 9;
  if (this->sig_chain_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sig_chain_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Relay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Relay)
  GOOGLE_DCHECK_NE(&from, this);
  const Relay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Relay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Relay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Relay)
    MergeFrom(*source);
  }
}

void Relay::MergeFrom(const Relay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Relay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src_identifier().size() > 0) {
    _internal_set_src_identifier(from._internal_src_identifier());
  }
  if (from.dest_id().size() > 0) {
    _internal_set_dest_id(from._internal_dest_id());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.src_pubkey().size() > 0) {
    _internal_set_src_pubkey(from._internal_src_pubkey());
  }
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.last_hash().size() > 0) {
    _internal_set_last_hash(from._internal_last_hash());
  }
  if (from.max_holding_seconds() != 0) {
    _internal_set_max_holding_seconds(from._internal_max_holding_seconds());
  }
  if (from.sig_chain_len() != 0) {
    _internal_set_sig_chain_len(from._internal_sig_chain_len());
  }
}

void Relay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Relay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relay::CopyFrom(const Relay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Relay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relay::IsInitialized() const {
  return true;
}

void Relay::InternalSwap(Relay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  src_identifier_.Swap(&other->src_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_id_.Swap(&other->dest_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_pubkey_.Swap(&other->src_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_hash_.Swap(&other->last_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Relay, sig_chain_len_)
      + sizeof(Relay::sig_chain_len_)
      - PROTOBUF_FIELD_OFFSET(Relay, max_holding_seconds_)>(
          reinterpret_cast<char*>(&max_holding_seconds_),
          reinterpret_cast<char*>(&other->max_holding_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Relay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transactions::_Internal {
 public:
};

void Transactions::clear_transactions() {
  transactions_.Clear();
}
Transactions::Transactions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Transactions)
}
Transactions::Transactions(const Transactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.Transactions)
}

void Transactions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transactions_pb_2fnodemessage_2eproto.base);
}

Transactions::~Transactions() {
  // @@protoc_insertion_point(destructor:pb.Transactions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transactions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Transactions::ArenaDtor(void* object) {
  Transactions* _this = reinterpret_cast< Transactions* >(object);
  (void)_this;
}
void Transactions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transactions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transactions& Transactions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transactions_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void Transactions::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Transactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transactions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transactions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Transactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Transactions)
  return target;
}

size_t Transactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Transactions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transactions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Transactions)
  GOOGLE_DCHECK_NE(&from, this);
  const Transactions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transactions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Transactions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Transactions)
    MergeFrom(*source);
  }
}

void Transactions::MergeFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Transactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void Transactions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Transactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transactions::CopyFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Transactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transactions::IsInitialized() const {
  return true;
}

void Transactions::InternalSwap(Transactions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transactions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BacktrackSignatureChain::_Internal {
 public:
};

void BacktrackSignatureChain::clear_sig_chain_elems() {
  sig_chain_elems_.Clear();
}
BacktrackSignatureChain::BacktrackSignatureChain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sig_chain_elems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.BacktrackSignatureChain)
}
BacktrackSignatureChain::BacktrackSignatureChain(const BacktrackSignatureChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sig_chain_elems_(from.sig_chain_elems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.BacktrackSignatureChain)
}

void BacktrackSignatureChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BacktrackSignatureChain_pb_2fnodemessage_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BacktrackSignatureChain::~BacktrackSignatureChain() {
  // @@protoc_insertion_point(destructor:pb.BacktrackSignatureChain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BacktrackSignatureChain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BacktrackSignatureChain::ArenaDtor(void* object) {
  BacktrackSignatureChain* _this = reinterpret_cast< BacktrackSignatureChain* >(object);
  (void)_this;
}
void BacktrackSignatureChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BacktrackSignatureChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BacktrackSignatureChain& BacktrackSignatureChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BacktrackSignatureChain_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void BacktrackSignatureChain::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BacktrackSignatureChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sig_chain_elems_.Clear();
  hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BacktrackSignatureChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.SigChainElem sig_chain_elems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sig_chain_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BacktrackSignatureChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BacktrackSignatureChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SigChainElem sig_chain_elems = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sig_chain_elems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sig_chain_elems(i), target, stream);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BacktrackSignatureChain)
  return target;
}

size_t BacktrackSignatureChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BacktrackSignatureChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.SigChainElem sig_chain_elems = 1;
  total_size += 1UL * this->_internal_sig_chain_elems_size();
  for (const auto& msg : this->sig_chain_elems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BacktrackSignatureChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BacktrackSignatureChain)
  GOOGLE_DCHECK_NE(&from, this);
  const BacktrackSignatureChain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BacktrackSignatureChain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BacktrackSignatureChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BacktrackSignatureChain)
    MergeFrom(*source);
  }
}

void BacktrackSignatureChain::MergeFrom(const BacktrackSignatureChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BacktrackSignatureChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sig_chain_elems_.MergeFrom(from.sig_chain_elems_);
  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void BacktrackSignatureChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BacktrackSignatureChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktrackSignatureChain::CopyFrom(const BacktrackSignatureChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BacktrackSignatureChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktrackSignatureChain::IsInitialized() const {
  return true;
}

void BacktrackSignatureChain::InternalSwap(BacktrackSignatureChain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sig_chain_elems_.InternalSwap(&other->sig_chain_elems_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BacktrackSignatureChain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IHaveSignatureChainTransaction::_Internal {
 public:
};

IHaveSignatureChainTransaction::IHaveSignatureChainTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.IHaveSignatureChainTransaction)
}
IHaveSignatureChainTransaction::IHaveSignatureChainTransaction(const IHaveSignatureChainTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_hash().empty()) {
    signature_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_hash(), 
      GetArena());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:pb.IHaveSignatureChainTransaction)
}

void IHaveSignatureChainTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IHaveSignatureChainTransaction_pb_2fnodemessage_2eproto.base);
  signature_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = 0u;
}

IHaveSignatureChainTransaction::~IHaveSignatureChainTransaction() {
  // @@protoc_insertion_point(destructor:pb.IHaveSignatureChainTransaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IHaveSignatureChainTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signature_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IHaveSignatureChainTransaction::ArenaDtor(void* object) {
  IHaveSignatureChainTransaction* _this = reinterpret_cast< IHaveSignatureChainTransaction* >(object);
  (void)_this;
}
void IHaveSignatureChainTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IHaveSignatureChainTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IHaveSignatureChainTransaction& IHaveSignatureChainTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IHaveSignatureChainTransaction_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void IHaveSignatureChainTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.IHaveSignatureChainTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_hash_.ClearToEmpty();
  height_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IHaveSignatureChainTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IHaveSignatureChainTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.IHaveSignatureChainTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_height(), target);
  }

  // bytes signature_hash = 2;
  if (this->signature_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.IHaveSignatureChainTransaction)
  return target;
}

size_t IHaveSignatureChainTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.IHaveSignatureChainTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature_hash = 2;
  if (this->signature_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_hash());
  }

  // uint32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IHaveSignatureChainTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.IHaveSignatureChainTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const IHaveSignatureChainTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IHaveSignatureChainTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.IHaveSignatureChainTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.IHaveSignatureChainTransaction)
    MergeFrom(*source);
  }
}

void IHaveSignatureChainTransaction::MergeFrom(const IHaveSignatureChainTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.IHaveSignatureChainTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature_hash().size() > 0) {
    _internal_set_signature_hash(from._internal_signature_hash());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void IHaveSignatureChainTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.IHaveSignatureChainTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IHaveSignatureChainTransaction::CopyFrom(const IHaveSignatureChainTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.IHaveSignatureChainTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IHaveSignatureChainTransaction::IsInitialized() const {
  return true;
}

void IHaveSignatureChainTransaction::InternalSwap(IHaveSignatureChainTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signature_hash_.Swap(&other->signature_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IHaveSignatureChainTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestSignatureChainTransaction::_Internal {
 public:
};

RequestSignatureChainTransaction::RequestSignatureChainTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.RequestSignatureChainTransaction)
}
RequestSignatureChainTransaction::RequestSignatureChainTransaction(const RequestSignatureChainTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_hash().empty()) {
    signature_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.RequestSignatureChainTransaction)
}

void RequestSignatureChainTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestSignatureChainTransaction_pb_2fnodemessage_2eproto.base);
  signature_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestSignatureChainTransaction::~RequestSignatureChainTransaction() {
  // @@protoc_insertion_point(destructor:pb.RequestSignatureChainTransaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestSignatureChainTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signature_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestSignatureChainTransaction::ArenaDtor(void* object) {
  RequestSignatureChainTransaction* _this = reinterpret_cast< RequestSignatureChainTransaction* >(object);
  (void)_this;
}
void RequestSignatureChainTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestSignatureChainTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestSignatureChainTransaction& RequestSignatureChainTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestSignatureChainTransaction_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void RequestSignatureChainTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RequestSignatureChainTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSignatureChainTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signature_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestSignatureChainTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RequestSignatureChainTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature_hash = 1;
  if (this->signature_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RequestSignatureChainTransaction)
  return target;
}

size_t RequestSignatureChainTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RequestSignatureChainTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature_hash = 1;
  if (this->signature_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSignatureChainTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RequestSignatureChainTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSignatureChainTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestSignatureChainTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RequestSignatureChainTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RequestSignatureChainTransaction)
    MergeFrom(*source);
  }
}

void RequestSignatureChainTransaction::MergeFrom(const RequestSignatureChainTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RequestSignatureChainTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature_hash().size() > 0) {
    _internal_set_signature_hash(from._internal_signature_hash());
  }
}

void RequestSignatureChainTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RequestSignatureChainTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSignatureChainTransaction::CopyFrom(const RequestSignatureChainTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RequestSignatureChainTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSignatureChainTransaction::IsInitialized() const {
  return true;
}

void RequestSignatureChainTransaction::InternalSwap(RequestSignatureChainTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signature_hash_.Swap(&other->signature_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSignatureChainTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestSignatureChainTransactionReply::_Internal {
 public:
  static const ::pb::Transaction& transaction(const RequestSignatureChainTransactionReply* msg);
};

const ::pb::Transaction&
RequestSignatureChainTransactionReply::_Internal::transaction(const RequestSignatureChainTransactionReply* msg) {
  return *msg->transaction_;
}
void RequestSignatureChainTransactionReply::clear_transaction() {
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
RequestSignatureChainTransactionReply::RequestSignatureChainTransactionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.RequestSignatureChainTransactionReply)
}
RequestSignatureChainTransactionReply::RequestSignatureChainTransactionReply(const RequestSignatureChainTransactionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::pb::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RequestSignatureChainTransactionReply)
}

void RequestSignatureChainTransactionReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestSignatureChainTransactionReply_pb_2fnodemessage_2eproto.base);
  transaction_ = nullptr;
}

RequestSignatureChainTransactionReply::~RequestSignatureChainTransactionReply() {
  // @@protoc_insertion_point(destructor:pb.RequestSignatureChainTransactionReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestSignatureChainTransactionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void RequestSignatureChainTransactionReply::ArenaDtor(void* object) {
  RequestSignatureChainTransactionReply* _this = reinterpret_cast< RequestSignatureChainTransactionReply* >(object);
  (void)_this;
}
void RequestSignatureChainTransactionReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestSignatureChainTransactionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestSignatureChainTransactionReply& RequestSignatureChainTransactionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestSignatureChainTransactionReply_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void RequestSignatureChainTransactionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RequestSignatureChainTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSignatureChainTransactionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestSignatureChainTransactionReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RequestSignatureChainTransactionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RequestSignatureChainTransactionReply)
  return target;
}

size_t RequestSignatureChainTransactionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RequestSignatureChainTransactionReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSignatureChainTransactionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RequestSignatureChainTransactionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSignatureChainTransactionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestSignatureChainTransactionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RequestSignatureChainTransactionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RequestSignatureChainTransactionReply)
    MergeFrom(*source);
  }
}

void RequestSignatureChainTransactionReply::MergeFrom(const RequestSignatureChainTransactionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RequestSignatureChainTransactionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    _internal_mutable_transaction()->::pb::Transaction::MergeFrom(from._internal_transaction());
  }
}

void RequestSignatureChainTransactionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RequestSignatureChainTransactionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSignatureChainTransactionReply::CopyFrom(const RequestSignatureChainTransactionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RequestSignatureChainTransactionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSignatureChainTransactionReply::IsInitialized() const {
  return true;
}

void RequestSignatureChainTransactionReply::InternalSwap(RequestSignatureChainTransactionReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSignatureChainTransactionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PinSignatureChain::_Internal {
 public:
};

PinSignatureChain::PinSignatureChain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.PinSignatureChain)
}
PinSignatureChain::PinSignatureChain(const PinSignatureChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.PinSignatureChain)
}

void PinSignatureChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PinSignatureChain_pb_2fnodemessage_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PinSignatureChain::~PinSignatureChain() {
  // @@protoc_insertion_point(destructor:pb.PinSignatureChain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PinSignatureChain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PinSignatureChain::ArenaDtor(void* object) {
  PinSignatureChain* _this = reinterpret_cast< PinSignatureChain* >(object);
  (void)_this;
}
void PinSignatureChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PinSignatureChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PinSignatureChain& PinSignatureChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PinSignatureChain_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void PinSignatureChain::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PinSignatureChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PinSignatureChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PinSignatureChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PinSignatureChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PinSignatureChain)
  return target;
}

size_t PinSignatureChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PinSignatureChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinSignatureChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PinSignatureChain)
  GOOGLE_DCHECK_NE(&from, this);
  const PinSignatureChain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PinSignatureChain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PinSignatureChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PinSignatureChain)
    MergeFrom(*source);
  }
}

void PinSignatureChain::MergeFrom(const PinSignatureChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PinSignatureChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void PinSignatureChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PinSignatureChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinSignatureChain::CopyFrom(const PinSignatureChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PinSignatureChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinSignatureChain::IsInitialized() const {
  return true;
}

void PinSignatureChain::InternalSwap(PinSignatureChain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PinSignatureChain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignatureChainObjectionUnsigned::_Internal {
 public:
};

SignatureChainObjectionUnsigned::SignatureChainObjectionUnsigned(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SignatureChainObjectionUnsigned)
}
SignatureChainObjectionUnsigned::SignatureChainObjectionUnsigned(const SignatureChainObjectionUnsigned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_hash().empty()) {
    signature_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_hash(), 
      GetArena());
  }
  reporter_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reporter_pubkey().empty()) {
    reporter_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reporter_pubkey(), 
      GetArena());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:pb.SignatureChainObjectionUnsigned)
}

void SignatureChainObjectionUnsigned::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureChainObjectionUnsigned_pb_2fnodemessage_2eproto.base);
  signature_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reporter_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = 0u;
}

SignatureChainObjectionUnsigned::~SignatureChainObjectionUnsigned() {
  // @@protoc_insertion_point(destructor:pb.SignatureChainObjectionUnsigned)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignatureChainObjectionUnsigned::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signature_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reporter_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignatureChainObjectionUnsigned::ArenaDtor(void* object) {
  SignatureChainObjectionUnsigned* _this = reinterpret_cast< SignatureChainObjectionUnsigned* >(object);
  (void)_this;
}
void SignatureChainObjectionUnsigned::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureChainObjectionUnsigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureChainObjectionUnsigned& SignatureChainObjectionUnsigned::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureChainObjectionUnsigned_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void SignatureChainObjectionUnsigned::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SignatureChainObjectionUnsigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_hash_.ClearToEmpty();
  reporter_pubkey_.ClearToEmpty();
  height_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureChainObjectionUnsigned::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes reporter_pubkey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reporter_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureChainObjectionUnsigned::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SignatureChainObjectionUnsigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_height(), target);
  }

  // bytes signature_hash = 2;
  if (this->signature_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature_hash(), target);
  }

  // bytes reporter_pubkey = 3;
  if (this->reporter_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_reporter_pubkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SignatureChainObjectionUnsigned)
  return target;
}

size_t SignatureChainObjectionUnsigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SignatureChainObjectionUnsigned)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature_hash = 2;
  if (this->signature_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_hash());
  }

  // bytes reporter_pubkey = 3;
  if (this->reporter_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reporter_pubkey());
  }

  // uint32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureChainObjectionUnsigned::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SignatureChainObjectionUnsigned)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureChainObjectionUnsigned* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureChainObjectionUnsigned>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SignatureChainObjectionUnsigned)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SignatureChainObjectionUnsigned)
    MergeFrom(*source);
  }
}

void SignatureChainObjectionUnsigned::MergeFrom(const SignatureChainObjectionUnsigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SignatureChainObjectionUnsigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature_hash().size() > 0) {
    _internal_set_signature_hash(from._internal_signature_hash());
  }
  if (from.reporter_pubkey().size() > 0) {
    _internal_set_reporter_pubkey(from._internal_reporter_pubkey());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void SignatureChainObjectionUnsigned::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SignatureChainObjectionUnsigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureChainObjectionUnsigned::CopyFrom(const SignatureChainObjectionUnsigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SignatureChainObjectionUnsigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureChainObjectionUnsigned::IsInitialized() const {
  return true;
}

void SignatureChainObjectionUnsigned::InternalSwap(SignatureChainObjectionUnsigned* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signature_hash_.Swap(&other->signature_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reporter_pubkey_.Swap(&other->reporter_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureChainObjectionUnsigned::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignatureChainObjectionSigned::_Internal {
 public:
};

SignatureChainObjectionSigned::SignatureChainObjectionSigned(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SignatureChainObjectionSigned)
}
SignatureChainObjectionSigned::SignatureChainObjectionSigned(const SignatureChainObjectionSigned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.SignatureChainObjectionSigned)
}

void SignatureChainObjectionSigned::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureChainObjectionSigned_pb_2fnodemessage_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SignatureChainObjectionSigned::~SignatureChainObjectionSigned() {
  // @@protoc_insertion_point(destructor:pb.SignatureChainObjectionSigned)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignatureChainObjectionSigned::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignatureChainObjectionSigned::ArenaDtor(void* object) {
  SignatureChainObjectionSigned* _this = reinterpret_cast< SignatureChainObjectionSigned* >(object);
  (void)_this;
}
void SignatureChainObjectionSigned::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureChainObjectionSigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureChainObjectionSigned& SignatureChainObjectionSigned::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureChainObjectionSigned_pb_2fnodemessage_2eproto.base);
  return *internal_default_instance();
}


void SignatureChainObjectionSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SignatureChainObjectionSigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureChainObjectionSigned::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureChainObjectionSigned::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SignatureChainObjectionSigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message = 1;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SignatureChainObjectionSigned)
  return target;
}

size_t SignatureChainObjectionSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SignatureChainObjectionSigned)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureChainObjectionSigned::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SignatureChainObjectionSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureChainObjectionSigned* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureChainObjectionSigned>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SignatureChainObjectionSigned)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SignatureChainObjectionSigned)
    MergeFrom(*source);
  }
}

void SignatureChainObjectionSigned::MergeFrom(const SignatureChainObjectionSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SignatureChainObjectionSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
}

void SignatureChainObjectionSigned::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SignatureChainObjectionSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureChainObjectionSigned::CopyFrom(const SignatureChainObjectionSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SignatureChainObjectionSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureChainObjectionSigned::IsInitialized() const {
  return true;
}

void SignatureChainObjectionSigned::InternalSwap(SignatureChainObjectionSigned* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureChainObjectionSigned::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::UnsignedMessage* Arena::CreateMaybeMessage< ::pb::UnsignedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::UnsignedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SignedMessage* Arena::CreateMaybeMessage< ::pb::SignedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SignedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Vote* Arena::CreateMaybeMessage< ::pb::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::IHaveBlockProposal* Arena::CreateMaybeMessage< ::pb::IHaveBlockProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::IHaveBlockProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RequestBlockProposal* Arena::CreateMaybeMessage< ::pb::RequestBlockProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RequestBlockProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RequestBlockProposalReply* Arena::CreateMaybeMessage< ::pb::RequestBlockProposalReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RequestBlockProposalReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RequestProposalTransactions* Arena::CreateMaybeMessage< ::pb::RequestProposalTransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RequestProposalTransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RequestProposalTransactionsReply* Arena::CreateMaybeMessage< ::pb::RequestProposalTransactionsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RequestProposalTransactionsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetConsensusState* Arena::CreateMaybeMessage< ::pb::GetConsensusState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetConsensusState >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetConsensusStateReply* Arena::CreateMaybeMessage< ::pb::GetConsensusStateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetConsensusStateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockHeaders* Arena::CreateMaybeMessage< ::pb::GetBlockHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockHeadersReply* Arena::CreateMaybeMessage< ::pb::GetBlockHeadersReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockHeadersReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlocks* Arena::CreateMaybeMessage< ::pb::GetBlocks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlocks >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlocksReply* Arena::CreateMaybeMessage< ::pb::GetBlocksReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlocksReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::StateRequest* Arena::CreateMaybeMessage< ::pb::StateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::StateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::StateNode* Arena::CreateMaybeMessage< ::pb::StateNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::StateNode >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetStates* Arena::CreateMaybeMessage< ::pb::GetStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetStates >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetStatesReply* Arena::CreateMaybeMessage< ::pb::GetStatesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetStatesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Relay* Arena::CreateMaybeMessage< ::pb::Relay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Relay >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Transactions* Arena::CreateMaybeMessage< ::pb::Transactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Transactions >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BacktrackSignatureChain* Arena::CreateMaybeMessage< ::pb::BacktrackSignatureChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::BacktrackSignatureChain >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::IHaveSignatureChainTransaction* Arena::CreateMaybeMessage< ::pb::IHaveSignatureChainTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::IHaveSignatureChainTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RequestSignatureChainTransaction* Arena::CreateMaybeMessage< ::pb::RequestSignatureChainTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RequestSignatureChainTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RequestSignatureChainTransactionReply* Arena::CreateMaybeMessage< ::pb::RequestSignatureChainTransactionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RequestSignatureChainTransactionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PinSignatureChain* Arena::CreateMaybeMessage< ::pb::PinSignatureChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PinSignatureChain >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SignatureChainObjectionUnsigned* Arena::CreateMaybeMessage< ::pb::SignatureChainObjectionUnsigned >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SignatureChainObjectionUnsigned >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SignatureChainObjectionSigned* Arena::CreateMaybeMessage< ::pb::SignatureChainObjectionSigned >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SignatureChainObjectionSigned >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
