// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#ifndef PROTOBUF_INCLUDED_transaction_2eproto
#define PROTOBUF_INCLUDED_transaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_transaction_2eproto();
namespace pb {
class Coinbase;
class CoinbaseDefaultTypeInternal;
extern CoinbaseDefaultTypeInternal _Coinbase_default_instance_;
class DeleteName;
class DeleteNameDefaultTypeInternal;
extern DeleteNameDefaultTypeInternal _DeleteName_default_instance_;
class GenerateID;
class GenerateIDDefaultTypeInternal;
extern GenerateIDDefaultTypeInternal _GenerateID_default_instance_;
class IssueAsset;
class IssueAssetDefaultTypeInternal;
extern IssueAssetDefaultTypeInternal _IssueAsset_default_instance_;
class NanoPay;
class NanoPayDefaultTypeInternal;
extern NanoPayDefaultTypeInternal _NanoPay_default_instance_;
class Payload;
class PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
class Program;
class ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
class RegisterName;
class RegisterNameDefaultTypeInternal;
extern RegisterNameDefaultTypeInternal _RegisterName_default_instance_;
class SigChainTxn;
class SigChainTxnDefaultTypeInternal;
extern SigChainTxnDefaultTypeInternal _SigChainTxn_default_instance_;
class Subscribe;
class SubscribeDefaultTypeInternal;
extern SubscribeDefaultTypeInternal _Subscribe_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransferAsset;
class TransferAssetDefaultTypeInternal;
extern TransferAssetDefaultTypeInternal _TransferAsset_default_instance_;
class TransferName;
class TransferNameDefaultTypeInternal;
extern TransferNameDefaultTypeInternal _TransferName_default_instance_;
class UnsignedTx;
class UnsignedTxDefaultTypeInternal;
extern UnsignedTxDefaultTypeInternal _UnsignedTx_default_instance_;
class Unsubscribe;
class UnsubscribeDefaultTypeInternal;
extern UnsubscribeDefaultTypeInternal _Unsubscribe_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::Coinbase* Arena::CreateMaybeMessage<::pb::Coinbase>(Arena*);
template<> ::pb::DeleteName* Arena::CreateMaybeMessage<::pb::DeleteName>(Arena*);
template<> ::pb::GenerateID* Arena::CreateMaybeMessage<::pb::GenerateID>(Arena*);
template<> ::pb::IssueAsset* Arena::CreateMaybeMessage<::pb::IssueAsset>(Arena*);
template<> ::pb::NanoPay* Arena::CreateMaybeMessage<::pb::NanoPay>(Arena*);
template<> ::pb::Payload* Arena::CreateMaybeMessage<::pb::Payload>(Arena*);
template<> ::pb::Program* Arena::CreateMaybeMessage<::pb::Program>(Arena*);
template<> ::pb::RegisterName* Arena::CreateMaybeMessage<::pb::RegisterName>(Arena*);
template<> ::pb::SigChainTxn* Arena::CreateMaybeMessage<::pb::SigChainTxn>(Arena*);
template<> ::pb::Subscribe* Arena::CreateMaybeMessage<::pb::Subscribe>(Arena*);
template<> ::pb::Transaction* Arena::CreateMaybeMessage<::pb::Transaction>(Arena*);
template<> ::pb::TransferAsset* Arena::CreateMaybeMessage<::pb::TransferAsset>(Arena*);
template<> ::pb::TransferName* Arena::CreateMaybeMessage<::pb::TransferName>(Arena*);
template<> ::pb::UnsignedTx* Arena::CreateMaybeMessage<::pb::UnsignedTx>(Arena*);
template<> ::pb::Unsubscribe* Arena::CreateMaybeMessage<::pb::Unsubscribe>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum PayloadType {
  COINBASE_TYPE = 0,
  TRANSFER_ASSET_TYPE = 1,
  SIG_CHAIN_TXN_TYPE = 2,
  REGISTER_NAME_TYPE = 3,
  TRANSFER_NAME_TYPE = 4,
  DELETE_NAME_TYPE = 5,
  SUBSCRIBE_TYPE = 6,
  UNSUBSCRIBE_TYPE = 7,
  GENERATE_ID_TYPE = 8,
  NANO_PAY_TYPE = 9,
  ISSUE_ASSET_TYPE = 10,
  PayloadType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PayloadType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PayloadType_IsValid(int value);
const PayloadType PayloadType_MIN = COINBASE_TYPE;
const PayloadType PayloadType_MAX = ISSUE_ASSET_TYPE;
const int PayloadType_ARRAYSIZE = PayloadType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PayloadType_descriptor();
inline const ::std::string& PayloadType_Name(PayloadType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PayloadType_descriptor(), value);
}
inline bool PayloadType_Parse(
    const ::std::string& name, PayloadType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayloadType>(
    PayloadType_descriptor(), name, value);
}
// ===================================================================

class UnsignedTx :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.UnsignedTx) */ {
 public:
  UnsignedTx();
  virtual ~UnsignedTx();

  UnsignedTx(const UnsignedTx& from);

  inline UnsignedTx& operator=(const UnsignedTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnsignedTx(UnsignedTx&& from) noexcept
    : UnsignedTx() {
    *this = ::std::move(from);
  }

  inline UnsignedTx& operator=(UnsignedTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UnsignedTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsignedTx* internal_default_instance() {
    return reinterpret_cast<const UnsignedTx*>(
               &_UnsignedTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UnsignedTx* other);
  friend void swap(UnsignedTx& a, UnsignedTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnsignedTx* New() const final {
    return CreateMaybeMessage<UnsignedTx>(nullptr);
  }

  UnsignedTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnsignedTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnsignedTx& from);
  void MergeFrom(const UnsignedTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsignedTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes attributes = 4;
  void clear_attributes();
  static const int kAttributesFieldNumber = 4;
  const ::std::string& attributes() const;
  void set_attributes(const ::std::string& value);
  #if LANG_CXX11
  void set_attributes(::std::string&& value);
  #endif
  void set_attributes(const char* value);
  void set_attributes(const void* value, size_t size);
  ::std::string* mutable_attributes();
  ::std::string* release_attributes();
  void set_allocated_attributes(::std::string* attributes);

  // .pb.Payload payload = 1;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 1;
  const ::pb::Payload& payload() const;
  ::pb::Payload* release_payload();
  ::pb::Payload* mutable_payload();
  void set_allocated_payload(::pb::Payload* payload);

  // uint64 nonce = 2;
  void clear_nonce();
  static const int kNonceFieldNumber = 2;
  ::google::protobuf::uint64 nonce() const;
  void set_nonce(::google::protobuf::uint64 value);

  // int64 fee = 3;
  void clear_fee();
  static const int kFeeFieldNumber = 3;
  ::google::protobuf::int64 fee() const;
  void set_fee(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.UnsignedTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr attributes_;
  ::pb::Payload* payload_;
  ::google::protobuf::uint64 nonce_;
  ::google::protobuf::int64 fee_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Program programs = 2;
  int programs_size() const;
  void clear_programs();
  static const int kProgramsFieldNumber = 2;
  ::pb::Program* mutable_programs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Program >*
      mutable_programs();
  const ::pb::Program& programs(int index) const;
  ::pb::Program* add_programs();
  const ::google::protobuf::RepeatedPtrField< ::pb::Program >&
      programs() const;

  // .pb.UnsignedTx unsigned_tx = 1;
  bool has_unsigned_tx() const;
  void clear_unsigned_tx();
  static const int kUnsignedTxFieldNumber = 1;
  const ::pb::UnsignedTx& unsigned_tx() const;
  ::pb::UnsignedTx* release_unsigned_tx();
  ::pb::UnsignedTx* mutable_unsigned_tx();
  void set_allocated_unsigned_tx(::pb::UnsignedTx* unsigned_tx);

  // @@protoc_insertion_point(class_scope:pb.Transaction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Program > programs_;
  ::pb::UnsignedTx* unsigned_tx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class Program :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Program) */ {
 public:
  Program();
  virtual ~Program();

  Program(const Program& from);

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(Program&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Program& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Program* other);
  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Program* New() const final {
    return CreateMaybeMessage<Program>(nullptr);
  }

  Program* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Program& from);
  void MergeFrom(const Program& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const void* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // bytes parameter = 2;
  void clear_parameter();
  static const int kParameterFieldNumber = 2;
  const ::std::string& parameter() const;
  void set_parameter(const ::std::string& value);
  #if LANG_CXX11
  void set_parameter(::std::string&& value);
  #endif
  void set_parameter(const char* value);
  void set_parameter(const void* value, size_t size);
  ::std::string* mutable_parameter();
  ::std::string* release_parameter();
  void set_allocated_parameter(::std::string* parameter);

  // @@protoc_insertion_point(class_scope:pb.Program)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr parameter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class Payload :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Payload) */ {
 public:
  Payload();
  virtual ~Payload();

  Payload(const Payload& from);

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(Payload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Payload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Payload* other);
  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Payload* New() const final {
    return CreateMaybeMessage<Payload>(nullptr);
  }

  Payload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Payload& from);
  void MergeFrom(const Payload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .pb.PayloadType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pb::PayloadType type() const;
  void set_type(::pb::PayloadType value);

  // @@protoc_insertion_point(class_scope:pb.Payload)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class Coinbase :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Coinbase) */ {
 public:
  Coinbase();
  virtual ~Coinbase();

  Coinbase(const Coinbase& from);

  inline Coinbase& operator=(const Coinbase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Coinbase(Coinbase&& from) noexcept
    : Coinbase() {
    *this = ::std::move(from);
  }

  inline Coinbase& operator=(Coinbase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Coinbase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coinbase* internal_default_instance() {
    return reinterpret_cast<const Coinbase*>(
               &_Coinbase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Coinbase* other);
  friend void swap(Coinbase& a, Coinbase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Coinbase* New() const final {
    return CreateMaybeMessage<Coinbase>(nullptr);
  }

  Coinbase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Coinbase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Coinbase& from);
  void MergeFrom(const Coinbase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coinbase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const void* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // bytes recipient = 2;
  void clear_recipient();
  static const int kRecipientFieldNumber = 2;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const void* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.Coinbase)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  ::google::protobuf::int64 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class SigChainTxn :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SigChainTxn) */ {
 public:
  SigChainTxn();
  virtual ~SigChainTxn();

  SigChainTxn(const SigChainTxn& from);

  inline SigChainTxn& operator=(const SigChainTxn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SigChainTxn(SigChainTxn&& from) noexcept
    : SigChainTxn() {
    *this = ::std::move(from);
  }

  inline SigChainTxn& operator=(SigChainTxn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SigChainTxn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigChainTxn* internal_default_instance() {
    return reinterpret_cast<const SigChainTxn*>(
               &_SigChainTxn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SigChainTxn* other);
  friend void swap(SigChainTxn& a, SigChainTxn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SigChainTxn* New() const final {
    return CreateMaybeMessage<SigChainTxn>(nullptr);
  }

  SigChainTxn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SigChainTxn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SigChainTxn& from);
  void MergeFrom(const SigChainTxn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigChainTxn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sig_chain = 1;
  void clear_sig_chain();
  static const int kSigChainFieldNumber = 1;
  const ::std::string& sig_chain() const;
  void set_sig_chain(const ::std::string& value);
  #if LANG_CXX11
  void set_sig_chain(::std::string&& value);
  #endif
  void set_sig_chain(const char* value);
  void set_sig_chain(const void* value, size_t size);
  ::std::string* mutable_sig_chain();
  ::std::string* release_sig_chain();
  void set_allocated_sig_chain(::std::string* sig_chain);

  // bytes submitter = 2;
  void clear_submitter();
  static const int kSubmitterFieldNumber = 2;
  const ::std::string& submitter() const;
  void set_submitter(const ::std::string& value);
  #if LANG_CXX11
  void set_submitter(::std::string&& value);
  #endif
  void set_submitter(const char* value);
  void set_submitter(const void* value, size_t size);
  ::std::string* mutable_submitter();
  ::std::string* release_submitter();
  void set_allocated_submitter(::std::string* submitter);

  // @@protoc_insertion_point(class_scope:pb.SigChainTxn)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sig_chain_;
  ::google::protobuf::internal::ArenaStringPtr submitter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class RegisterName :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RegisterName) */ {
 public:
  RegisterName();
  virtual ~RegisterName();

  RegisterName(const RegisterName& from);

  inline RegisterName& operator=(const RegisterName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterName(RegisterName&& from) noexcept
    : RegisterName() {
    *this = ::std::move(from);
  }

  inline RegisterName& operator=(RegisterName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegisterName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterName* internal_default_instance() {
    return reinterpret_cast<const RegisterName*>(
               &_RegisterName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RegisterName* other);
  friend void swap(RegisterName& a, RegisterName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterName* New() const final {
    return CreateMaybeMessage<RegisterName>(nullptr);
  }

  RegisterName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterName& from);
  void MergeFrom(const RegisterName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes registrant = 1;
  void clear_registrant();
  static const int kRegistrantFieldNumber = 1;
  const ::std::string& registrant() const;
  void set_registrant(const ::std::string& value);
  #if LANG_CXX11
  void set_registrant(::std::string&& value);
  #endif
  void set_registrant(const char* value);
  void set_registrant(const void* value, size_t size);
  ::std::string* mutable_registrant();
  ::std::string* release_registrant();
  void set_allocated_registrant(::std::string* registrant);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 registration_fee = 3;
  void clear_registration_fee();
  static const int kRegistrationFeeFieldNumber = 3;
  ::google::protobuf::int64 registration_fee() const;
  void set_registration_fee(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.RegisterName)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr registrant_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 registration_fee_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class TransferName :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TransferName) */ {
 public:
  TransferName();
  virtual ~TransferName();

  TransferName(const TransferName& from);

  inline TransferName& operator=(const TransferName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferName(TransferName&& from) noexcept
    : TransferName() {
    *this = ::std::move(from);
  }

  inline TransferName& operator=(TransferName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TransferName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferName* internal_default_instance() {
    return reinterpret_cast<const TransferName*>(
               &_TransferName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TransferName* other);
  friend void swap(TransferName& a, TransferName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferName* New() const final {
    return CreateMaybeMessage<TransferName>(nullptr);
  }

  TransferName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferName& from);
  void MergeFrom(const TransferName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes registrant = 2;
  void clear_registrant();
  static const int kRegistrantFieldNumber = 2;
  const ::std::string& registrant() const;
  void set_registrant(const ::std::string& value);
  #if LANG_CXX11
  void set_registrant(::std::string&& value);
  #endif
  void set_registrant(const char* value);
  void set_registrant(const void* value, size_t size);
  ::std::string* mutable_registrant();
  ::std::string* release_registrant();
  void set_allocated_registrant(::std::string* registrant);

  // bytes recipient = 3;
  void clear_recipient();
  static const int kRecipientFieldNumber = 3;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const void* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // @@protoc_insertion_point(class_scope:pb.TransferName)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr registrant_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class DeleteName :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DeleteName) */ {
 public:
  DeleteName();
  virtual ~DeleteName();

  DeleteName(const DeleteName& from);

  inline DeleteName& operator=(const DeleteName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteName(DeleteName&& from) noexcept
    : DeleteName() {
    *this = ::std::move(from);
  }

  inline DeleteName& operator=(DeleteName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteName* internal_default_instance() {
    return reinterpret_cast<const DeleteName*>(
               &_DeleteName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteName* other);
  friend void swap(DeleteName& a, DeleteName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteName* New() const final {
    return CreateMaybeMessage<DeleteName>(nullptr);
  }

  DeleteName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteName& from);
  void MergeFrom(const DeleteName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes registrant = 1;
  void clear_registrant();
  static const int kRegistrantFieldNumber = 1;
  const ::std::string& registrant() const;
  void set_registrant(const ::std::string& value);
  #if LANG_CXX11
  void set_registrant(::std::string&& value);
  #endif
  void set_registrant(const char* value);
  void set_registrant(const void* value, size_t size);
  ::std::string* mutable_registrant();
  ::std::string* release_registrant();
  void set_allocated_registrant(::std::string* registrant);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.DeleteName)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr registrant_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class Subscribe :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Subscribe) */ {
 public:
  Subscribe();
  virtual ~Subscribe();

  Subscribe(const Subscribe& from);

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subscribe(Subscribe&& from) noexcept
    : Subscribe() {
    *this = ::std::move(from);
  }

  inline Subscribe& operator=(Subscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Subscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscribe* internal_default_instance() {
    return reinterpret_cast<const Subscribe*>(
               &_Subscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Subscribe* other);
  friend void swap(Subscribe& a, Subscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subscribe* New() const final {
    return CreateMaybeMessage<Subscribe>(nullptr);
  }

  Subscribe* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Subscribe>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Subscribe& from);
  void MergeFrom(const Subscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes subscriber = 1;
  void clear_subscriber();
  static const int kSubscriberFieldNumber = 1;
  const ::std::string& subscriber() const;
  void set_subscriber(const ::std::string& value);
  #if LANG_CXX11
  void set_subscriber(::std::string&& value);
  #endif
  void set_subscriber(const char* value);
  void set_subscriber(const void* value, size_t size);
  ::std::string* mutable_subscriber();
  ::std::string* release_subscriber();
  void set_allocated_subscriber(::std::string* subscriber);

  // string identifier = 2;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  const ::std::string& identifier() const;
  void set_identifier(const ::std::string& value);
  #if LANG_CXX11
  void set_identifier(::std::string&& value);
  #endif
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  ::std::string* mutable_identifier();
  ::std::string* release_identifier();
  void set_allocated_identifier(::std::string* identifier);

  // string topic = 3;
  void clear_topic();
  static const int kTopicFieldNumber = 3;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // bytes meta = 6;
  void clear_meta();
  static const int kMetaFieldNumber = 6;
  const ::std::string& meta() const;
  void set_meta(const ::std::string& value);
  #if LANG_CXX11
  void set_meta(::std::string&& value);
  #endif
  void set_meta(const char* value);
  void set_meta(const void* value, size_t size);
  ::std::string* mutable_meta();
  ::std::string* release_meta();
  void set_allocated_meta(::std::string* meta);

  // uint32 bucket = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_bucket();
  PROTOBUF_DEPRECATED static const int kBucketFieldNumber = 4;
  PROTOBUF_DEPRECATED ::google::protobuf::uint32 bucket() const;
  PROTOBUF_DEPRECATED void set_bucket(::google::protobuf::uint32 value);

  // uint32 duration = 5;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Subscribe)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subscriber_;
  ::google::protobuf::internal::ArenaStringPtr identifier_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr meta_;
  ::google::protobuf::uint32 bucket_;
  ::google::protobuf::uint32 duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class Unsubscribe :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Unsubscribe) */ {
 public:
  Unsubscribe();
  virtual ~Unsubscribe();

  Unsubscribe(const Unsubscribe& from);

  inline Unsubscribe& operator=(const Unsubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Unsubscribe(Unsubscribe&& from) noexcept
    : Unsubscribe() {
    *this = ::std::move(from);
  }

  inline Unsubscribe& operator=(Unsubscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Unsubscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unsubscribe* internal_default_instance() {
    return reinterpret_cast<const Unsubscribe*>(
               &_Unsubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Unsubscribe* other);
  friend void swap(Unsubscribe& a, Unsubscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Unsubscribe* New() const final {
    return CreateMaybeMessage<Unsubscribe>(nullptr);
  }

  Unsubscribe* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Unsubscribe>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Unsubscribe& from);
  void MergeFrom(const Unsubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unsubscribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes subscriber = 1;
  void clear_subscriber();
  static const int kSubscriberFieldNumber = 1;
  const ::std::string& subscriber() const;
  void set_subscriber(const ::std::string& value);
  #if LANG_CXX11
  void set_subscriber(::std::string&& value);
  #endif
  void set_subscriber(const char* value);
  void set_subscriber(const void* value, size_t size);
  ::std::string* mutable_subscriber();
  ::std::string* release_subscriber();
  void set_allocated_subscriber(::std::string* subscriber);

  // string identifier = 2;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  const ::std::string& identifier() const;
  void set_identifier(const ::std::string& value);
  #if LANG_CXX11
  void set_identifier(::std::string&& value);
  #endif
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  ::std::string* mutable_identifier();
  ::std::string* release_identifier();
  void set_allocated_identifier(::std::string* identifier);

  // string topic = 3;
  void clear_topic();
  static const int kTopicFieldNumber = 3;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:pb.Unsubscribe)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subscriber_;
  ::google::protobuf::internal::ArenaStringPtr identifier_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class TransferAsset :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TransferAsset) */ {
 public:
  TransferAsset();
  virtual ~TransferAsset();

  TransferAsset(const TransferAsset& from);

  inline TransferAsset& operator=(const TransferAsset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferAsset(TransferAsset&& from) noexcept
    : TransferAsset() {
    *this = ::std::move(from);
  }

  inline TransferAsset& operator=(TransferAsset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TransferAsset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferAsset* internal_default_instance() {
    return reinterpret_cast<const TransferAsset*>(
               &_TransferAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TransferAsset* other);
  friend void swap(TransferAsset& a, TransferAsset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferAsset* New() const final {
    return CreateMaybeMessage<TransferAsset>(nullptr);
  }

  TransferAsset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferAsset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferAsset& from);
  void MergeFrom(const TransferAsset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferAsset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const void* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // bytes recipient = 2;
  void clear_recipient();
  static const int kRecipientFieldNumber = 2;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const void* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TransferAsset)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  ::google::protobuf::int64 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class GenerateID :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.GenerateID) */ {
 public:
  GenerateID();
  virtual ~GenerateID();

  GenerateID(const GenerateID& from);

  inline GenerateID& operator=(const GenerateID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenerateID(GenerateID&& from) noexcept
    : GenerateID() {
    *this = ::std::move(from);
  }

  inline GenerateID& operator=(GenerateID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GenerateID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateID* internal_default_instance() {
    return reinterpret_cast<const GenerateID*>(
               &_GenerateID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GenerateID* other);
  friend void swap(GenerateID& a, GenerateID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenerateID* New() const final {
    return CreateMaybeMessage<GenerateID>(nullptr);
  }

  GenerateID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenerateID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenerateID& from);
  void MergeFrom(const GenerateID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // int64 registration_fee = 2;
  void clear_registration_fee();
  static const int kRegistrationFeeFieldNumber = 2;
  ::google::protobuf::int64 registration_fee() const;
  void set_registration_fee(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.GenerateID)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::int64 registration_fee_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class NanoPay :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.NanoPay) */ {
 public:
  NanoPay();
  virtual ~NanoPay();

  NanoPay(const NanoPay& from);

  inline NanoPay& operator=(const NanoPay& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NanoPay(NanoPay&& from) noexcept
    : NanoPay() {
    *this = ::std::move(from);
  }

  inline NanoPay& operator=(NanoPay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NanoPay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NanoPay* internal_default_instance() {
    return reinterpret_cast<const NanoPay*>(
               &_NanoPay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(NanoPay* other);
  friend void swap(NanoPay& a, NanoPay& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NanoPay* New() const final {
    return CreateMaybeMessage<NanoPay>(nullptr);
  }

  NanoPay* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NanoPay>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NanoPay& from);
  void MergeFrom(const NanoPay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NanoPay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const void* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // bytes recipient = 2;
  void clear_recipient();
  static const int kRecipientFieldNumber = 2;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const void* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // uint64 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int64 amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // uint32 txn_expiration = 5;
  void clear_txn_expiration();
  static const int kTxnExpirationFieldNumber = 5;
  ::google::protobuf::uint32 txn_expiration() const;
  void set_txn_expiration(::google::protobuf::uint32 value);

  // uint32 nano_pay_expiration = 6;
  void clear_nano_pay_expiration();
  static const int kNanoPayExpirationFieldNumber = 6;
  ::google::protobuf::uint32 nano_pay_expiration() const;
  void set_nano_pay_expiration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.NanoPay)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::uint32 txn_expiration_;
  ::google::protobuf::uint32 nano_pay_expiration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class IssueAsset :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.IssueAsset) */ {
 public:
  IssueAsset();
  virtual ~IssueAsset();

  IssueAsset(const IssueAsset& from);

  inline IssueAsset& operator=(const IssueAsset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IssueAsset(IssueAsset&& from) noexcept
    : IssueAsset() {
    *this = ::std::move(from);
  }

  inline IssueAsset& operator=(IssueAsset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IssueAsset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IssueAsset* internal_default_instance() {
    return reinterpret_cast<const IssueAsset*>(
               &_IssueAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(IssueAsset* other);
  friend void swap(IssueAsset& a, IssueAsset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IssueAsset* New() const final {
    return CreateMaybeMessage<IssueAsset>(nullptr);
  }

  IssueAsset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IssueAsset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IssueAsset& from);
  void MergeFrom(const IssueAsset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IssueAsset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const void* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string symbol = 3;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // int64 total_supply = 4;
  void clear_total_supply();
  static const int kTotalSupplyFieldNumber = 4;
  ::google::protobuf::int64 total_supply() const;
  void set_total_supply(::google::protobuf::int64 value);

  // uint32 precision = 5;
  void clear_precision();
  static const int kPrecisionFieldNumber = 5;
  ::google::protobuf::uint32 precision() const;
  void set_precision(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.IssueAsset)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int64 total_supply_;
  ::google::protobuf::uint32 precision_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnsignedTx

// .pb.Payload payload = 1;
inline bool UnsignedTx::has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline void UnsignedTx::clear_payload() {
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
inline const ::pb::Payload& UnsignedTx::payload() const {
  const ::pb::Payload* p = payload_;
  // @@protoc_insertion_point(field_get:pb.UnsignedTx.payload)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Payload*>(
      &::pb::_Payload_default_instance_);
}
inline ::pb::Payload* UnsignedTx::release_payload() {
  // @@protoc_insertion_point(field_release:pb.UnsignedTx.payload)
  
  ::pb::Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::pb::Payload* UnsignedTx::mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Payload>(GetArenaNoVirtual());
    payload_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.UnsignedTx.payload)
  return payload_;
}
inline void UnsignedTx::set_allocated_payload(::pb::Payload* payload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete payload_;
  }
  if (payload) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:pb.UnsignedTx.payload)
}

// uint64 nonce = 2;
inline void UnsignedTx::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnsignedTx::nonce() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedTx.nonce)
  return nonce_;
}
inline void UnsignedTx::set_nonce(::google::protobuf::uint64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:pb.UnsignedTx.nonce)
}

// int64 fee = 3;
inline void UnsignedTx::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UnsignedTx::fee() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedTx.fee)
  return fee_;
}
inline void UnsignedTx::set_fee(::google::protobuf::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:pb.UnsignedTx.fee)
}

// bytes attributes = 4;
inline void UnsignedTx::clear_attributes() {
  attributes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnsignedTx::attributes() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedTx.attributes)
  return attributes_.GetNoArena();
}
inline void UnsignedTx::set_attributes(const ::std::string& value) {
  
  attributes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UnsignedTx.attributes)
}
#if LANG_CXX11
inline void UnsignedTx::set_attributes(::std::string&& value) {
  
  attributes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UnsignedTx.attributes)
}
#endif
inline void UnsignedTx::set_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attributes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UnsignedTx.attributes)
}
inline void UnsignedTx::set_attributes(const void* value, size_t size) {
  
  attributes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UnsignedTx.attributes)
}
inline ::std::string* UnsignedTx::mutable_attributes() {
  
  // @@protoc_insertion_point(field_mutable:pb.UnsignedTx.attributes)
  return attributes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnsignedTx::release_attributes() {
  // @@protoc_insertion_point(field_release:pb.UnsignedTx.attributes)
  
  return attributes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnsignedTx::set_allocated_attributes(::std::string* attributes) {
  if (attributes != nullptr) {
    
  } else {
    
  }
  attributes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attributes);
  // @@protoc_insertion_point(field_set_allocated:pb.UnsignedTx.attributes)
}

// -------------------------------------------------------------------

// Transaction

// .pb.UnsignedTx unsigned_tx = 1;
inline bool Transaction::has_unsigned_tx() const {
  return this != internal_default_instance() && unsigned_tx_ != nullptr;
}
inline void Transaction::clear_unsigned_tx() {
  if (GetArenaNoVirtual() == nullptr && unsigned_tx_ != nullptr) {
    delete unsigned_tx_;
  }
  unsigned_tx_ = nullptr;
}
inline const ::pb::UnsignedTx& Transaction::unsigned_tx() const {
  const ::pb::UnsignedTx* p = unsigned_tx_;
  // @@protoc_insertion_point(field_get:pb.Transaction.unsigned_tx)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::UnsignedTx*>(
      &::pb::_UnsignedTx_default_instance_);
}
inline ::pb::UnsignedTx* Transaction::release_unsigned_tx() {
  // @@protoc_insertion_point(field_release:pb.Transaction.unsigned_tx)
  
  ::pb::UnsignedTx* temp = unsigned_tx_;
  unsigned_tx_ = nullptr;
  return temp;
}
inline ::pb::UnsignedTx* Transaction::mutable_unsigned_tx() {
  
  if (unsigned_tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::UnsignedTx>(GetArenaNoVirtual());
    unsigned_tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Transaction.unsigned_tx)
  return unsigned_tx_;
}
inline void Transaction::set_allocated_unsigned_tx(::pb::UnsignedTx* unsigned_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unsigned_tx_;
  }
  if (unsigned_tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unsigned_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unsigned_tx, submessage_arena);
    }
    
  } else {
    
  }
  unsigned_tx_ = unsigned_tx;
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.unsigned_tx)
}

// repeated .pb.Program programs = 2;
inline int Transaction::programs_size() const {
  return programs_.size();
}
inline void Transaction::clear_programs() {
  programs_.Clear();
}
inline ::pb::Program* Transaction::mutable_programs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.programs)
  return programs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Program >*
Transaction::mutable_programs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.programs)
  return &programs_;
}
inline const ::pb::Program& Transaction::programs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.programs)
  return programs_.Get(index);
}
inline ::pb::Program* Transaction::add_programs() {
  // @@protoc_insertion_point(field_add:pb.Transaction.programs)
  return programs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Program >&
Transaction::programs() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.programs)
  return programs_;
}

// -------------------------------------------------------------------

// Program

// bytes code = 1;
inline void Program::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Program::code() const {
  // @@protoc_insertion_point(field_get:pb.Program.code)
  return code_.GetNoArena();
}
inline void Program::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Program.code)
}
#if LANG_CXX11
inline void Program::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Program.code)
}
#endif
inline void Program::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Program.code)
}
inline void Program::set_code(const void* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Program.code)
}
inline ::std::string* Program::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.Program.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Program::release_code() {
  // @@protoc_insertion_point(field_release:pb.Program.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Program::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pb.Program.code)
}

// bytes parameter = 2;
inline void Program::clear_parameter() {
  parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Program::parameter() const {
  // @@protoc_insertion_point(field_get:pb.Program.parameter)
  return parameter_.GetNoArena();
}
inline void Program::set_parameter(const ::std::string& value) {
  
  parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Program.parameter)
}
#if LANG_CXX11
inline void Program::set_parameter(::std::string&& value) {
  
  parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Program.parameter)
}
#endif
inline void Program::set_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Program.parameter)
}
inline void Program::set_parameter(const void* value, size_t size) {
  
  parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Program.parameter)
}
inline ::std::string* Program::mutable_parameter() {
  
  // @@protoc_insertion_point(field_mutable:pb.Program.parameter)
  return parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Program::release_parameter() {
  // @@protoc_insertion_point(field_release:pb.Program.parameter)
  
  return parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Program::set_allocated_parameter(::std::string* parameter) {
  if (parameter != nullptr) {
    
  } else {
    
  }
  parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter);
  // @@protoc_insertion_point(field_set_allocated:pb.Program.parameter)
}

// -------------------------------------------------------------------

// Payload

// .pb.PayloadType type = 1;
inline void Payload::clear_type() {
  type_ = 0;
}
inline ::pb::PayloadType Payload::type() const {
  // @@protoc_insertion_point(field_get:pb.Payload.type)
  return static_cast< ::pb::PayloadType >(type_);
}
inline void Payload::set_type(::pb::PayloadType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.Payload.type)
}

// bytes data = 2;
inline void Payload::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Payload::data() const {
  // @@protoc_insertion_point(field_get:pb.Payload.data)
  return data_.GetNoArena();
}
inline void Payload::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Payload.data)
}
#if LANG_CXX11
inline void Payload::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Payload.data)
}
#endif
inline void Payload::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Payload.data)
}
inline void Payload::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Payload.data)
}
inline ::std::string* Payload::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.Payload.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Payload::release_data() {
  // @@protoc_insertion_point(field_release:pb.Payload.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Payload::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.Payload.data)
}

// -------------------------------------------------------------------

// Coinbase

// bytes sender = 1;
inline void Coinbase::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Coinbase::sender() const {
  // @@protoc_insertion_point(field_get:pb.Coinbase.sender)
  return sender_.GetNoArena();
}
inline void Coinbase::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Coinbase.sender)
}
#if LANG_CXX11
inline void Coinbase::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Coinbase.sender)
}
#endif
inline void Coinbase::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Coinbase.sender)
}
inline void Coinbase::set_sender(const void* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Coinbase.sender)
}
inline ::std::string* Coinbase::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:pb.Coinbase.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Coinbase::release_sender() {
  // @@protoc_insertion_point(field_release:pb.Coinbase.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coinbase::set_allocated_sender(::std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:pb.Coinbase.sender)
}

// bytes recipient = 2;
inline void Coinbase::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Coinbase::recipient() const {
  // @@protoc_insertion_point(field_get:pb.Coinbase.recipient)
  return recipient_.GetNoArena();
}
inline void Coinbase::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Coinbase.recipient)
}
#if LANG_CXX11
inline void Coinbase::set_recipient(::std::string&& value) {
  
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Coinbase.recipient)
}
#endif
inline void Coinbase::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Coinbase.recipient)
}
inline void Coinbase::set_recipient(const void* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Coinbase.recipient)
}
inline ::std::string* Coinbase::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:pb.Coinbase.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Coinbase::release_recipient() {
  // @@protoc_insertion_point(field_release:pb.Coinbase.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coinbase::set_allocated_recipient(::std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:pb.Coinbase.recipient)
}

// int64 amount = 3;
inline void Coinbase::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Coinbase::amount() const {
  // @@protoc_insertion_point(field_get:pb.Coinbase.amount)
  return amount_;
}
inline void Coinbase::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:pb.Coinbase.amount)
}

// -------------------------------------------------------------------

// SigChainTxn

// bytes sig_chain = 1;
inline void SigChainTxn::clear_sig_chain() {
  sig_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SigChainTxn::sig_chain() const {
  // @@protoc_insertion_point(field_get:pb.SigChainTxn.sig_chain)
  return sig_chain_.GetNoArena();
}
inline void SigChainTxn::set_sig_chain(const ::std::string& value) {
  
  sig_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SigChainTxn.sig_chain)
}
#if LANG_CXX11
inline void SigChainTxn::set_sig_chain(::std::string&& value) {
  
  sig_chain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SigChainTxn.sig_chain)
}
#endif
inline void SigChainTxn::set_sig_chain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SigChainTxn.sig_chain)
}
inline void SigChainTxn::set_sig_chain(const void* value, size_t size) {
  
  sig_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SigChainTxn.sig_chain)
}
inline ::std::string* SigChainTxn::mutable_sig_chain() {
  
  // @@protoc_insertion_point(field_mutable:pb.SigChainTxn.sig_chain)
  return sig_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SigChainTxn::release_sig_chain() {
  // @@protoc_insertion_point(field_release:pb.SigChainTxn.sig_chain)
  
  return sig_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SigChainTxn::set_allocated_sig_chain(::std::string* sig_chain) {
  if (sig_chain != nullptr) {
    
  } else {
    
  }
  sig_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig_chain);
  // @@protoc_insertion_point(field_set_allocated:pb.SigChainTxn.sig_chain)
}

// bytes submitter = 2;
inline void SigChainTxn::clear_submitter() {
  submitter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SigChainTxn::submitter() const {
  // @@protoc_insertion_point(field_get:pb.SigChainTxn.submitter)
  return submitter_.GetNoArena();
}
inline void SigChainTxn::set_submitter(const ::std::string& value) {
  
  submitter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SigChainTxn.submitter)
}
#if LANG_CXX11
inline void SigChainTxn::set_submitter(::std::string&& value) {
  
  submitter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SigChainTxn.submitter)
}
#endif
inline void SigChainTxn::set_submitter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  submitter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SigChainTxn.submitter)
}
inline void SigChainTxn::set_submitter(const void* value, size_t size) {
  
  submitter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SigChainTxn.submitter)
}
inline ::std::string* SigChainTxn::mutable_submitter() {
  
  // @@protoc_insertion_point(field_mutable:pb.SigChainTxn.submitter)
  return submitter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SigChainTxn::release_submitter() {
  // @@protoc_insertion_point(field_release:pb.SigChainTxn.submitter)
  
  return submitter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SigChainTxn::set_allocated_submitter(::std::string* submitter) {
  if (submitter != nullptr) {
    
  } else {
    
  }
  submitter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), submitter);
  // @@protoc_insertion_point(field_set_allocated:pb.SigChainTxn.submitter)
}

// -------------------------------------------------------------------

// RegisterName

// bytes registrant = 1;
inline void RegisterName::clear_registrant() {
  registrant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterName::registrant() const {
  // @@protoc_insertion_point(field_get:pb.RegisterName.registrant)
  return registrant_.GetNoArena();
}
inline void RegisterName::set_registrant(const ::std::string& value) {
  
  registrant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RegisterName.registrant)
}
#if LANG_CXX11
inline void RegisterName::set_registrant(::std::string&& value) {
  
  registrant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RegisterName.registrant)
}
#endif
inline void RegisterName::set_registrant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registrant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RegisterName.registrant)
}
inline void RegisterName::set_registrant(const void* value, size_t size) {
  
  registrant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RegisterName.registrant)
}
inline ::std::string* RegisterName::mutable_registrant() {
  
  // @@protoc_insertion_point(field_mutable:pb.RegisterName.registrant)
  return registrant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterName::release_registrant() {
  // @@protoc_insertion_point(field_release:pb.RegisterName.registrant)
  
  return registrant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterName::set_allocated_registrant(::std::string* registrant) {
  if (registrant != nullptr) {
    
  } else {
    
  }
  registrant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registrant);
  // @@protoc_insertion_point(field_set_allocated:pb.RegisterName.registrant)
}

// string name = 2;
inline void RegisterName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterName::name() const {
  // @@protoc_insertion_point(field_get:pb.RegisterName.name)
  return name_.GetNoArena();
}
inline void RegisterName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RegisterName.name)
}
#if LANG_CXX11
inline void RegisterName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RegisterName.name)
}
#endif
inline void RegisterName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RegisterName.name)
}
inline void RegisterName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RegisterName.name)
}
inline ::std::string* RegisterName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.RegisterName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterName::release_name() {
  // @@protoc_insertion_point(field_release:pb.RegisterName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterName::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.RegisterName.name)
}

// int64 registration_fee = 3;
inline void RegisterName::clear_registration_fee() {
  registration_fee_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 RegisterName::registration_fee() const {
  // @@protoc_insertion_point(field_get:pb.RegisterName.registration_fee)
  return registration_fee_;
}
inline void RegisterName::set_registration_fee(::google::protobuf::int64 value) {
  
  registration_fee_ = value;
  // @@protoc_insertion_point(field_set:pb.RegisterName.registration_fee)
}

// -------------------------------------------------------------------

// TransferName

// string name = 1;
inline void TransferName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferName::name() const {
  // @@protoc_insertion_point(field_get:pb.TransferName.name)
  return name_.GetNoArena();
}
inline void TransferName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TransferName.name)
}
#if LANG_CXX11
inline void TransferName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TransferName.name)
}
#endif
inline void TransferName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TransferName.name)
}
inline void TransferName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TransferName.name)
}
inline ::std::string* TransferName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.TransferName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferName::release_name() {
  // @@protoc_insertion_point(field_release:pb.TransferName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferName::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.TransferName.name)
}

// bytes registrant = 2;
inline void TransferName::clear_registrant() {
  registrant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferName::registrant() const {
  // @@protoc_insertion_point(field_get:pb.TransferName.registrant)
  return registrant_.GetNoArena();
}
inline void TransferName::set_registrant(const ::std::string& value) {
  
  registrant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TransferName.registrant)
}
#if LANG_CXX11
inline void TransferName::set_registrant(::std::string&& value) {
  
  registrant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TransferName.registrant)
}
#endif
inline void TransferName::set_registrant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registrant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TransferName.registrant)
}
inline void TransferName::set_registrant(const void* value, size_t size) {
  
  registrant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TransferName.registrant)
}
inline ::std::string* TransferName::mutable_registrant() {
  
  // @@protoc_insertion_point(field_mutable:pb.TransferName.registrant)
  return registrant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferName::release_registrant() {
  // @@protoc_insertion_point(field_release:pb.TransferName.registrant)
  
  return registrant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferName::set_allocated_registrant(::std::string* registrant) {
  if (registrant != nullptr) {
    
  } else {
    
  }
  registrant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registrant);
  // @@protoc_insertion_point(field_set_allocated:pb.TransferName.registrant)
}

// bytes recipient = 3;
inline void TransferName::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferName::recipient() const {
  // @@protoc_insertion_point(field_get:pb.TransferName.recipient)
  return recipient_.GetNoArena();
}
inline void TransferName::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TransferName.recipient)
}
#if LANG_CXX11
inline void TransferName::set_recipient(::std::string&& value) {
  
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TransferName.recipient)
}
#endif
inline void TransferName::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TransferName.recipient)
}
inline void TransferName::set_recipient(const void* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TransferName.recipient)
}
inline ::std::string* TransferName::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:pb.TransferName.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferName::release_recipient() {
  // @@protoc_insertion_point(field_release:pb.TransferName.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferName::set_allocated_recipient(::std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:pb.TransferName.recipient)
}

// -------------------------------------------------------------------

// DeleteName

// bytes registrant = 1;
inline void DeleteName::clear_registrant() {
  registrant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteName::registrant() const {
  // @@protoc_insertion_point(field_get:pb.DeleteName.registrant)
  return registrant_.GetNoArena();
}
inline void DeleteName::set_registrant(const ::std::string& value) {
  
  registrant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeleteName.registrant)
}
#if LANG_CXX11
inline void DeleteName::set_registrant(::std::string&& value) {
  
  registrant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeleteName.registrant)
}
#endif
inline void DeleteName::set_registrant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registrant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeleteName.registrant)
}
inline void DeleteName::set_registrant(const void* value, size_t size) {
  
  registrant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeleteName.registrant)
}
inline ::std::string* DeleteName::mutable_registrant() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeleteName.registrant)
  return registrant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteName::release_registrant() {
  // @@protoc_insertion_point(field_release:pb.DeleteName.registrant)
  
  return registrant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteName::set_allocated_registrant(::std::string* registrant) {
  if (registrant != nullptr) {
    
  } else {
    
  }
  registrant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registrant);
  // @@protoc_insertion_point(field_set_allocated:pb.DeleteName.registrant)
}

// string name = 2;
inline void DeleteName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteName::name() const {
  // @@protoc_insertion_point(field_get:pb.DeleteName.name)
  return name_.GetNoArena();
}
inline void DeleteName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DeleteName.name)
}
#if LANG_CXX11
inline void DeleteName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DeleteName.name)
}
#endif
inline void DeleteName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DeleteName.name)
}
inline void DeleteName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DeleteName.name)
}
inline ::std::string* DeleteName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.DeleteName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteName::release_name() {
  // @@protoc_insertion_point(field_release:pb.DeleteName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteName::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.DeleteName.name)
}

// -------------------------------------------------------------------

// Subscribe

// bytes subscriber = 1;
inline void Subscribe::clear_subscriber() {
  subscriber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscribe::subscriber() const {
  // @@protoc_insertion_point(field_get:pb.Subscribe.subscriber)
  return subscriber_.GetNoArena();
}
inline void Subscribe::set_subscriber(const ::std::string& value) {
  
  subscriber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Subscribe.subscriber)
}
#if LANG_CXX11
inline void Subscribe::set_subscriber(::std::string&& value) {
  
  subscriber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Subscribe.subscriber)
}
#endif
inline void Subscribe::set_subscriber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscriber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Subscribe.subscriber)
}
inline void Subscribe::set_subscriber(const void* value, size_t size) {
  
  subscriber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Subscribe.subscriber)
}
inline ::std::string* Subscribe::mutable_subscriber() {
  
  // @@protoc_insertion_point(field_mutable:pb.Subscribe.subscriber)
  return subscriber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_subscriber() {
  // @@protoc_insertion_point(field_release:pb.Subscribe.subscriber)
  
  return subscriber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_subscriber(::std::string* subscriber) {
  if (subscriber != nullptr) {
    
  } else {
    
  }
  subscriber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscriber);
  // @@protoc_insertion_point(field_set_allocated:pb.Subscribe.subscriber)
}

// string identifier = 2;
inline void Subscribe::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscribe::identifier() const {
  // @@protoc_insertion_point(field_get:pb.Subscribe.identifier)
  return identifier_.GetNoArena();
}
inline void Subscribe::set_identifier(const ::std::string& value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Subscribe.identifier)
}
#if LANG_CXX11
inline void Subscribe::set_identifier(::std::string&& value) {
  
  identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Subscribe.identifier)
}
#endif
inline void Subscribe::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Subscribe.identifier)
}
inline void Subscribe::set_identifier(const char* value, size_t size) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Subscribe.identifier)
}
inline ::std::string* Subscribe::mutable_identifier() {
  
  // @@protoc_insertion_point(field_mutable:pb.Subscribe.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_identifier() {
  // @@protoc_insertion_point(field_release:pb.Subscribe.identifier)
  
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_identifier(::std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:pb.Subscribe.identifier)
}

// string topic = 3;
inline void Subscribe::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscribe::topic() const {
  // @@protoc_insertion_point(field_get:pb.Subscribe.topic)
  return topic_.GetNoArena();
}
inline void Subscribe::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Subscribe.topic)
}
#if LANG_CXX11
inline void Subscribe::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Subscribe.topic)
}
#endif
inline void Subscribe::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Subscribe.topic)
}
inline void Subscribe::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Subscribe.topic)
}
inline ::std::string* Subscribe::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:pb.Subscribe.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_topic() {
  // @@protoc_insertion_point(field_release:pb.Subscribe.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:pb.Subscribe.topic)
}

// uint32 bucket = 4 [deprecated = true];
inline void Subscribe::clear_bucket() {
  bucket_ = 0u;
}
inline ::google::protobuf::uint32 Subscribe::bucket() const {
  // @@protoc_insertion_point(field_get:pb.Subscribe.bucket)
  return bucket_;
}
inline void Subscribe::set_bucket(::google::protobuf::uint32 value) {
  
  bucket_ = value;
  // @@protoc_insertion_point(field_set:pb.Subscribe.bucket)
}

// uint32 duration = 5;
inline void Subscribe::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 Subscribe::duration() const {
  // @@protoc_insertion_point(field_get:pb.Subscribe.duration)
  return duration_;
}
inline void Subscribe::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:pb.Subscribe.duration)
}

// bytes meta = 6;
inline void Subscribe::clear_meta() {
  meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscribe::meta() const {
  // @@protoc_insertion_point(field_get:pb.Subscribe.meta)
  return meta_.GetNoArena();
}
inline void Subscribe::set_meta(const ::std::string& value) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Subscribe.meta)
}
#if LANG_CXX11
inline void Subscribe::set_meta(::std::string&& value) {
  
  meta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Subscribe.meta)
}
#endif
inline void Subscribe::set_meta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Subscribe.meta)
}
inline void Subscribe::set_meta(const void* value, size_t size) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Subscribe.meta)
}
inline ::std::string* Subscribe::mutable_meta() {
  
  // @@protoc_insertion_point(field_mutable:pb.Subscribe.meta)
  return meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_meta() {
  // @@protoc_insertion_point(field_release:pb.Subscribe.meta)
  
  return meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_meta(::std::string* meta) {
  if (meta != nullptr) {
    
  } else {
    
  }
  meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meta);
  // @@protoc_insertion_point(field_set_allocated:pb.Subscribe.meta)
}

// -------------------------------------------------------------------

// Unsubscribe

// bytes subscriber = 1;
inline void Unsubscribe::clear_subscriber() {
  subscriber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Unsubscribe::subscriber() const {
  // @@protoc_insertion_point(field_get:pb.Unsubscribe.subscriber)
  return subscriber_.GetNoArena();
}
inline void Unsubscribe::set_subscriber(const ::std::string& value) {
  
  subscriber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Unsubscribe.subscriber)
}
#if LANG_CXX11
inline void Unsubscribe::set_subscriber(::std::string&& value) {
  
  subscriber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Unsubscribe.subscriber)
}
#endif
inline void Unsubscribe::set_subscriber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscriber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Unsubscribe.subscriber)
}
inline void Unsubscribe::set_subscriber(const void* value, size_t size) {
  
  subscriber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Unsubscribe.subscriber)
}
inline ::std::string* Unsubscribe::mutable_subscriber() {
  
  // @@protoc_insertion_point(field_mutable:pb.Unsubscribe.subscriber)
  return subscriber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Unsubscribe::release_subscriber() {
  // @@protoc_insertion_point(field_release:pb.Unsubscribe.subscriber)
  
  return subscriber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Unsubscribe::set_allocated_subscriber(::std::string* subscriber) {
  if (subscriber != nullptr) {
    
  } else {
    
  }
  subscriber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscriber);
  // @@protoc_insertion_point(field_set_allocated:pb.Unsubscribe.subscriber)
}

// string identifier = 2;
inline void Unsubscribe::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Unsubscribe::identifier() const {
  // @@protoc_insertion_point(field_get:pb.Unsubscribe.identifier)
  return identifier_.GetNoArena();
}
inline void Unsubscribe::set_identifier(const ::std::string& value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Unsubscribe.identifier)
}
#if LANG_CXX11
inline void Unsubscribe::set_identifier(::std::string&& value) {
  
  identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Unsubscribe.identifier)
}
#endif
inline void Unsubscribe::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Unsubscribe.identifier)
}
inline void Unsubscribe::set_identifier(const char* value, size_t size) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Unsubscribe.identifier)
}
inline ::std::string* Unsubscribe::mutable_identifier() {
  
  // @@protoc_insertion_point(field_mutable:pb.Unsubscribe.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Unsubscribe::release_identifier() {
  // @@protoc_insertion_point(field_release:pb.Unsubscribe.identifier)
  
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Unsubscribe::set_allocated_identifier(::std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:pb.Unsubscribe.identifier)
}

// string topic = 3;
inline void Unsubscribe::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Unsubscribe::topic() const {
  // @@protoc_insertion_point(field_get:pb.Unsubscribe.topic)
  return topic_.GetNoArena();
}
inline void Unsubscribe::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Unsubscribe.topic)
}
#if LANG_CXX11
inline void Unsubscribe::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Unsubscribe.topic)
}
#endif
inline void Unsubscribe::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Unsubscribe.topic)
}
inline void Unsubscribe::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Unsubscribe.topic)
}
inline ::std::string* Unsubscribe::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:pb.Unsubscribe.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Unsubscribe::release_topic() {
  // @@protoc_insertion_point(field_release:pb.Unsubscribe.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Unsubscribe::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:pb.Unsubscribe.topic)
}

// -------------------------------------------------------------------

// TransferAsset

// bytes sender = 1;
inline void TransferAsset::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferAsset::sender() const {
  // @@protoc_insertion_point(field_get:pb.TransferAsset.sender)
  return sender_.GetNoArena();
}
inline void TransferAsset::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TransferAsset.sender)
}
#if LANG_CXX11
inline void TransferAsset::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TransferAsset.sender)
}
#endif
inline void TransferAsset::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TransferAsset.sender)
}
inline void TransferAsset::set_sender(const void* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TransferAsset.sender)
}
inline ::std::string* TransferAsset::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:pb.TransferAsset.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferAsset::release_sender() {
  // @@protoc_insertion_point(field_release:pb.TransferAsset.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAsset::set_allocated_sender(::std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:pb.TransferAsset.sender)
}

// bytes recipient = 2;
inline void TransferAsset::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferAsset::recipient() const {
  // @@protoc_insertion_point(field_get:pb.TransferAsset.recipient)
  return recipient_.GetNoArena();
}
inline void TransferAsset::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TransferAsset.recipient)
}
#if LANG_CXX11
inline void TransferAsset::set_recipient(::std::string&& value) {
  
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TransferAsset.recipient)
}
#endif
inline void TransferAsset::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TransferAsset.recipient)
}
inline void TransferAsset::set_recipient(const void* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TransferAsset.recipient)
}
inline ::std::string* TransferAsset::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:pb.TransferAsset.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferAsset::release_recipient() {
  // @@protoc_insertion_point(field_release:pb.TransferAsset.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAsset::set_allocated_recipient(::std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:pb.TransferAsset.recipient)
}

// int64 amount = 3;
inline void TransferAsset::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TransferAsset::amount() const {
  // @@protoc_insertion_point(field_get:pb.TransferAsset.amount)
  return amount_;
}
inline void TransferAsset::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:pb.TransferAsset.amount)
}

// -------------------------------------------------------------------

// GenerateID

// bytes public_key = 1;
inline void GenerateID::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenerateID::public_key() const {
  // @@protoc_insertion_point(field_get:pb.GenerateID.public_key)
  return public_key_.GetNoArena();
}
inline void GenerateID::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.GenerateID.public_key)
}
#if LANG_CXX11
inline void GenerateID::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GenerateID.public_key)
}
#endif
inline void GenerateID::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GenerateID.public_key)
}
inline void GenerateID::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GenerateID.public_key)
}
inline ::std::string* GenerateID::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:pb.GenerateID.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenerateID::release_public_key() {
  // @@protoc_insertion_point(field_release:pb.GenerateID.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateID::set_allocated_public_key(::std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:pb.GenerateID.public_key)
}

// int64 registration_fee = 2;
inline void GenerateID::clear_registration_fee() {
  registration_fee_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GenerateID::registration_fee() const {
  // @@protoc_insertion_point(field_get:pb.GenerateID.registration_fee)
  return registration_fee_;
}
inline void GenerateID::set_registration_fee(::google::protobuf::int64 value) {
  
  registration_fee_ = value;
  // @@protoc_insertion_point(field_set:pb.GenerateID.registration_fee)
}

// -------------------------------------------------------------------

// NanoPay

// bytes sender = 1;
inline void NanoPay::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NanoPay::sender() const {
  // @@protoc_insertion_point(field_get:pb.NanoPay.sender)
  return sender_.GetNoArena();
}
inline void NanoPay::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.NanoPay.sender)
}
#if LANG_CXX11
inline void NanoPay::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.NanoPay.sender)
}
#endif
inline void NanoPay::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.NanoPay.sender)
}
inline void NanoPay::set_sender(const void* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.NanoPay.sender)
}
inline ::std::string* NanoPay::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:pb.NanoPay.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPay::release_sender() {
  // @@protoc_insertion_point(field_release:pb.NanoPay.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPay::set_allocated_sender(::std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:pb.NanoPay.sender)
}

// bytes recipient = 2;
inline void NanoPay::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NanoPay::recipient() const {
  // @@protoc_insertion_point(field_get:pb.NanoPay.recipient)
  return recipient_.GetNoArena();
}
inline void NanoPay::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.NanoPay.recipient)
}
#if LANG_CXX11
inline void NanoPay::set_recipient(::std::string&& value) {
  
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.NanoPay.recipient)
}
#endif
inline void NanoPay::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.NanoPay.recipient)
}
inline void NanoPay::set_recipient(const void* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.NanoPay.recipient)
}
inline ::std::string* NanoPay::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:pb.NanoPay.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPay::release_recipient() {
  // @@protoc_insertion_point(field_release:pb.NanoPay.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPay::set_allocated_recipient(::std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:pb.NanoPay.recipient)
}

// uint64 id = 3;
inline void NanoPay::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NanoPay::id() const {
  // @@protoc_insertion_point(field_get:pb.NanoPay.id)
  return id_;
}
inline void NanoPay::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.NanoPay.id)
}

// int64 amount = 4;
inline void NanoPay::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 NanoPay::amount() const {
  // @@protoc_insertion_point(field_get:pb.NanoPay.amount)
  return amount_;
}
inline void NanoPay::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:pb.NanoPay.amount)
}

// uint32 txn_expiration = 5;
inline void NanoPay::clear_txn_expiration() {
  txn_expiration_ = 0u;
}
inline ::google::protobuf::uint32 NanoPay::txn_expiration() const {
  // @@protoc_insertion_point(field_get:pb.NanoPay.txn_expiration)
  return txn_expiration_;
}
inline void NanoPay::set_txn_expiration(::google::protobuf::uint32 value) {
  
  txn_expiration_ = value;
  // @@protoc_insertion_point(field_set:pb.NanoPay.txn_expiration)
}

// uint32 nano_pay_expiration = 6;
inline void NanoPay::clear_nano_pay_expiration() {
  nano_pay_expiration_ = 0u;
}
inline ::google::protobuf::uint32 NanoPay::nano_pay_expiration() const {
  // @@protoc_insertion_point(field_get:pb.NanoPay.nano_pay_expiration)
  return nano_pay_expiration_;
}
inline void NanoPay::set_nano_pay_expiration(::google::protobuf::uint32 value) {
  
  nano_pay_expiration_ = value;
  // @@protoc_insertion_point(field_set:pb.NanoPay.nano_pay_expiration)
}

// -------------------------------------------------------------------

// IssueAsset

// bytes sender = 1;
inline void IssueAsset::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueAsset::sender() const {
  // @@protoc_insertion_point(field_get:pb.IssueAsset.sender)
  return sender_.GetNoArena();
}
inline void IssueAsset::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.IssueAsset.sender)
}
#if LANG_CXX11
inline void IssueAsset::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IssueAsset.sender)
}
#endif
inline void IssueAsset::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IssueAsset.sender)
}
inline void IssueAsset::set_sender(const void* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IssueAsset.sender)
}
inline ::std::string* IssueAsset::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:pb.IssueAsset.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueAsset::release_sender() {
  // @@protoc_insertion_point(field_release:pb.IssueAsset.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueAsset::set_allocated_sender(::std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:pb.IssueAsset.sender)
}

// string name = 2;
inline void IssueAsset::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueAsset::name() const {
  // @@protoc_insertion_point(field_get:pb.IssueAsset.name)
  return name_.GetNoArena();
}
inline void IssueAsset::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.IssueAsset.name)
}
#if LANG_CXX11
inline void IssueAsset::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IssueAsset.name)
}
#endif
inline void IssueAsset::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IssueAsset.name)
}
inline void IssueAsset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IssueAsset.name)
}
inline ::std::string* IssueAsset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.IssueAsset.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueAsset::release_name() {
  // @@protoc_insertion_point(field_release:pb.IssueAsset.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueAsset::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.IssueAsset.name)
}

// string symbol = 3;
inline void IssueAsset::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueAsset::symbol() const {
  // @@protoc_insertion_point(field_get:pb.IssueAsset.symbol)
  return symbol_.GetNoArena();
}
inline void IssueAsset::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.IssueAsset.symbol)
}
#if LANG_CXX11
inline void IssueAsset::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IssueAsset.symbol)
}
#endif
inline void IssueAsset::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IssueAsset.symbol)
}
inline void IssueAsset::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IssueAsset.symbol)
}
inline ::std::string* IssueAsset::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:pb.IssueAsset.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueAsset::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.IssueAsset.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueAsset::set_allocated_symbol(::std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:pb.IssueAsset.symbol)
}

// int64 total_supply = 4;
inline void IssueAsset::clear_total_supply() {
  total_supply_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IssueAsset::total_supply() const {
  // @@protoc_insertion_point(field_get:pb.IssueAsset.total_supply)
  return total_supply_;
}
inline void IssueAsset::set_total_supply(::google::protobuf::int64 value) {
  
  total_supply_ = value;
  // @@protoc_insertion_point(field_set:pb.IssueAsset.total_supply)
}

// uint32 precision = 5;
inline void IssueAsset::clear_precision() {
  precision_ = 0u;
}
inline ::google::protobuf::uint32 IssueAsset::precision() const {
  // @@protoc_insertion_point(field_get:pb.IssueAsset.precision)
  return precision_;
}
inline void IssueAsset::set_precision(::google::protobuf::uint32 value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:pb.IssueAsset.precision)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::PayloadType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PayloadType>() {
  return ::pb::PayloadType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_transaction_2eproto
