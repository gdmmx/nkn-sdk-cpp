// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/sigchain.proto

#include "pb/sigchain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pb_2fsigchain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigChainElem_pb_2fsigchain_2eproto;
namespace pb {
class SigChainElemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigChainElem> _instance;
} _SigChainElem_default_instance_;
class SigChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigChain> _instance;
} _SigChain_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_SigChain_pb_2fsigchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SigChain_default_instance_;
    new (ptr) ::pb::SigChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SigChain_pb_2fsigchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SigChain_pb_2fsigchain_2eproto}, {
      &scc_info_SigChainElem_pb_2fsigchain_2eproto.base,}};

static void InitDefaultsscc_info_SigChainElem_pb_2fsigchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SigChainElem_default_instance_;
    new (ptr) ::pb::SigChainElem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigChainElem_pb_2fsigchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigChainElem_pb_2fsigchain_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pb_2fsigchain_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pb_2fsigchain_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pb_2fsigchain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pb_2fsigchain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SigChainElem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SigChainElem, id_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChainElem, next_pubkey_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChainElem, mining_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChainElem, signature_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChainElem, sig_algo_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChainElem, vrf_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChainElem, proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SigChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SigChain, nonce_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChain, data_size_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChain, block_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChain, src_id_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChain, src_pubkey_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChain, dest_id_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChain, dest_pubkey_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChain, elems_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::SigChainElem)},
  { 12, -1, sizeof(::pb::SigChain)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SigChainElem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SigChain_default_instance_),
};

const char descriptor_table_protodef_pb_2fsigchain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021pb/sigchain.proto\022\002pb\"\215\001\n\014SigChainElem"
  "\022\n\n\002id\030\001 \001(\014\022\023\n\013next_pubkey\030\002 \001(\014\022\016\n\006min"
  "ing\030\003 \001(\010\022\021\n\tsignature\030\004 \001(\014\022\035\n\010sig_algo"
  "\030\005 \001(\0162\013.pb.SigAlgo\022\013\n\003vrf\030\006 \001(\014\022\r\n\005proo"
  "f\030\007 \001(\014\"\253\001\n\010SigChain\022\r\n\005nonce\030\001 \001(\r\022\021\n\td"
  "ata_size\030\002 \001(\r\022\022\n\nblock_hash\030\003 \001(\014\022\016\n\006sr"
  "c_id\030\004 \001(\014\022\022\n\nsrc_pubkey\030\005 \001(\014\022\017\n\007dest_i"
  "d\030\006 \001(\014\022\023\n\013dest_pubkey\030\007 \001(\014\022\037\n\005elems\030\010 "
  "\003(\0132\020.pb.SigChainElem*\"\n\007SigAlgo\022\r\n\tSIGN"
  "ATURE\020\000\022\010\n\004HASH\020\001B\006Z\004./pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pb_2fsigchain_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pb_2fsigchain_2eproto_sccs[2] = {
  &scc_info_SigChain_pb_2fsigchain_2eproto.base,
  &scc_info_SigChainElem_pb_2fsigchain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pb_2fsigchain_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fsigchain_2eproto = {
  false, false, descriptor_table_protodef_pb_2fsigchain_2eproto, "pb/sigchain.proto", 393,
  &descriptor_table_pb_2fsigchain_2eproto_once, descriptor_table_pb_2fsigchain_2eproto_sccs, descriptor_table_pb_2fsigchain_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_pb_2fsigchain_2eproto::offsets,
  file_level_metadata_pb_2fsigchain_2eproto, 2, file_level_enum_descriptors_pb_2fsigchain_2eproto, file_level_service_descriptors_pb_2fsigchain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pb_2fsigchain_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pb_2fsigchain_2eproto)), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SigAlgo_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fsigchain_2eproto);
  return file_level_enum_descriptors_pb_2fsigchain_2eproto[0];
}
bool SigAlgo_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SigChainElem::_Internal {
 public:
};

SigChainElem::SigChainElem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SigChainElem)
}
SigChainElem::SigChainElem(const SigChainElem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  next_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_pubkey().empty()) {
    next_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_pubkey(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf().empty()) {
    vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrf(), 
      GetArena());
  }
  proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proof().empty()) {
    proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proof(), 
      GetArena());
  }
  ::memcpy(&mining_, &from.mining_,
    static_cast<size_t>(reinterpret_cast<char*>(&sig_algo_) -
    reinterpret_cast<char*>(&mining_)) + sizeof(sig_algo_));
  // @@protoc_insertion_point(copy_constructor:pb.SigChainElem)
}

void SigChainElem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigChainElem_pb_2fsigchain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mining_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sig_algo_) -
      reinterpret_cast<char*>(&mining_)) + sizeof(sig_algo_));
}

SigChainElem::~SigChainElem() {
  // @@protoc_insertion_point(destructor:pb.SigChainElem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigChainElem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vrf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigChainElem::ArenaDtor(void* object) {
  SigChainElem* _this = reinterpret_cast< SigChainElem* >(object);
  (void)_this;
}
void SigChainElem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigChainElem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigChainElem& SigChainElem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigChainElem_pb_2fsigchain_2eproto.base);
  return *internal_default_instance();
}


void SigChainElem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SigChainElem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  next_pubkey_.ClearToEmpty();
  signature_.ClearToEmpty();
  vrf_.ClearToEmpty();
  proof_.ClearToEmpty();
  ::memset(&mining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sig_algo_) -
      reinterpret_cast<char*>(&mining_)) + sizeof(sig_algo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigChainElem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes next_pubkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_next_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.SigAlgo sig_algo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sig_algo(static_cast<::pb::SigAlgo>(val));
        } else goto handle_unusual;
        continue;
      // bytes vrf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_vrf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proof = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_proof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigChainElem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SigChainElem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes next_pubkey = 2;
  if (this->next_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_next_pubkey(), target);
  }

  // bool mining = 3;
  if (this->mining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_mining(), target);
  }

  // bytes signature = 4;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  // .pb.SigAlgo sig_algo = 5;
  if (this->sig_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sig_algo(), target);
  }

  // bytes vrf = 6;
  if (this->vrf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_vrf(), target);
  }

  // bytes proof = 7;
  if (this->proof().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_proof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SigChainElem)
  return target;
}

size_t SigChainElem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SigChainElem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes next_pubkey = 2;
  if (this->next_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next_pubkey());
  }

  // bytes signature = 4;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes vrf = 6;
  if (this->vrf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vrf());
  }

  // bytes proof = 7;
  if (this->proof().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proof());
  }

  // bool mining = 3;
  if (this->mining() != 0) {
    total_size += 1 + 1;
  }

  // .pb.SigAlgo sig_algo = 5;
  if (this->sig_algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sig_algo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigChainElem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SigChainElem)
  GOOGLE_DCHECK_NE(&from, this);
  const SigChainElem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigChainElem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SigChainElem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SigChainElem)
    MergeFrom(*source);
  }
}

void SigChainElem::MergeFrom(const SigChainElem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SigChainElem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.next_pubkey().size() > 0) {
    _internal_set_next_pubkey(from._internal_next_pubkey());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.vrf().size() > 0) {
    _internal_set_vrf(from._internal_vrf());
  }
  if (from.proof().size() > 0) {
    _internal_set_proof(from._internal_proof());
  }
  if (from.mining() != 0) {
    _internal_set_mining(from._internal_mining());
  }
  if (from.sig_algo() != 0) {
    _internal_set_sig_algo(from._internal_sig_algo());
  }
}

void SigChainElem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SigChainElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigChainElem::CopyFrom(const SigChainElem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SigChainElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigChainElem::IsInitialized() const {
  return true;
}

void SigChainElem::InternalSwap(SigChainElem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_pubkey_.Swap(&other->next_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vrf_.Swap(&other->vrf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proof_.Swap(&other->proof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigChainElem, sig_algo_)
      + sizeof(SigChainElem::sig_algo_)
      - PROTOBUF_FIELD_OFFSET(SigChainElem, mining_)>(
          reinterpret_cast<char*>(&mining_),
          reinterpret_cast<char*>(&other->mining_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigChainElem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SigChain::_Internal {
 public:
};

SigChain::SigChain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SigChain)
}
SigChain::SigChain(const SigChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elems_(from.elems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArena());
  }
  src_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_id().empty()) {
    src_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_id(), 
      GetArena());
  }
  src_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_pubkey().empty()) {
    src_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_pubkey(), 
      GetArena());
  }
  dest_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest_id().empty()) {
    dest_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dest_id(), 
      GetArena());
  }
  dest_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest_pubkey().empty()) {
    dest_pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dest_pubkey(), 
      GetArena());
  }
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_size_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(data_size_));
  // @@protoc_insertion_point(copy_constructor:pb.SigChain)
}

void SigChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigChain_pb_2fsigchain_2eproto.base);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&data_size_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(data_size_));
}

SigChain::~SigChain() {
  // @@protoc_insertion_point(destructor:pb.SigChain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SigChain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigChain::ArenaDtor(void* object) {
  SigChain* _this = reinterpret_cast< SigChain* >(object);
  (void)_this;
}
void SigChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SigChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigChain& SigChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigChain_pb_2fsigchain_2eproto.base);
  return *internal_default_instance();
}


void SigChain::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SigChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elems_.Clear();
  block_hash_.ClearToEmpty();
  src_id_.ClearToEmpty();
  src_pubkey_.ClearToEmpty();
  dest_id_.ClearToEmpty();
  dest_pubkey_.ClearToEmpty();
  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_size_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(data_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes src_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_src_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes src_pubkey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_src_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dest_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dest_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dest_pubkey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_dest_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.SigChainElem elems = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SigChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nonce = 1;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nonce(), target);
  }

  // uint32 data_size = 2;
  if (this->data_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_size(), target);
  }

  // bytes block_hash = 3;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_block_hash(), target);
  }

  // bytes src_id = 4;
  if (this->src_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_src_id(), target);
  }

  // bytes src_pubkey = 5;
  if (this->src_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_src_pubkey(), target);
  }

  // bytes dest_id = 6;
  if (this->dest_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_dest_id(), target);
  }

  // bytes dest_pubkey = 7;
  if (this->dest_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_dest_pubkey(), target);
  }

  // repeated .pb.SigChainElem elems = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_elems(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SigChain)
  return target;
}

size_t SigChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SigChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.SigChainElem elems = 8;
  total_size += 1UL * this->_internal_elems_size();
  for (const auto& msg : this->elems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes block_hash = 3;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes src_id = 4;
  if (this->src_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_src_id());
  }

  // bytes src_pubkey = 5;
  if (this->src_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_src_pubkey());
  }

  // bytes dest_id = 6;
  if (this->dest_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dest_id());
  }

  // bytes dest_pubkey = 7;
  if (this->dest_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dest_pubkey());
  }

  // uint32 nonce = 1;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nonce());
  }

  // uint32 data_size = 2;
  if (this->data_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SigChain)
  GOOGLE_DCHECK_NE(&from, this);
  const SigChain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigChain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SigChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SigChain)
    MergeFrom(*source);
  }
}

void SigChain::MergeFrom(const SigChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SigChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elems_.MergeFrom(from.elems_);
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.src_id().size() > 0) {
    _internal_set_src_id(from._internal_src_id());
  }
  if (from.src_pubkey().size() > 0) {
    _internal_set_src_pubkey(from._internal_src_pubkey());
  }
  if (from.dest_id().size() > 0) {
    _internal_set_dest_id(from._internal_dest_id());
  }
  if (from.dest_pubkey().size() > 0) {
    _internal_set_dest_pubkey(from._internal_dest_pubkey());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.data_size() != 0) {
    _internal_set_data_size(from._internal_data_size());
  }
}

void SigChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SigChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigChain::CopyFrom(const SigChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SigChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigChain::IsInitialized() const {
  return true;
}

void SigChain::InternalSwap(SigChain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  elems_.InternalSwap(&other->elems_);
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_id_.Swap(&other->src_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_pubkey_.Swap(&other->src_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_id_.Swap(&other->dest_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_pubkey_.Swap(&other->dest_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigChain, data_size_)
      + sizeof(SigChain::data_size_)
      - PROTOBUF_FIELD_OFFSET(SigChain, nonce_)>(
          reinterpret_cast<char*>(&nonce_),
          reinterpret_cast<char*>(&other->nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigChain::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::SigChainElem* Arena::CreateMaybeMessage< ::pb::SigChainElem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SigChainElem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SigChain* Arena::CreateMaybeMessage< ::pb::SigChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SigChain >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
